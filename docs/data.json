{"name":"rebass","version":"0.4.0-beta.7","description":"React functional UI component design system","author":"Brent Jackson","license":"MIT","scripts":{"prepublish":"mkdir -p dist && babel src --out-dir dist --ignore __tests__","deploy":"./deploy.sh","data":"node docs/create-data.js","build":"mkdir -p build && npm run data && webpack -p --progress --colors","start":"webpack-dev-server","fix":"standard --fix","standard":"standard","test":"standard && jest"},"peerDependencies":{"react":"^0.14.0 || ^15.0.0"},"devDependencies":{"babel-cli":"^6.14.0","babel-core":"^6.14.0","babel-eslint":"^6.1.2","babel-loader":"^6.2.5","babel-preset-es2015":"^6.14.0","babel-preset-react":"^6.5.0","babel-preset-stage-0":"^6.5.0","babel-register":"^6.14.0","cxs":"^1.0.1","enzyme":"^2.4.1","gh-pages":"^0.11.0","gridsys":"^1.0.0-beta.5","jest":"^15.1.1","json-loader":"^0.5.4","jsonp":"^0.2.0","lodash":"^4.16.1","object-assign":"^4.1.0","onchange":"^3.0.2","querystring":"^0.2.0","react":"^15.3.1","react-addons-test-utils":"^15.3.1","react-component-permutations":"^1.0.0-beta2","react-docgen":"^2.10.0","react-dom":"^15.3.1","react-element-to-jsx-string":"^4.1.0","react-geomicons":"^2.1.0","react-router":"^4.0.0-alpha.4","reflexbox":"^2.2.2","reline":"^1.0.0-beta.3","standard":"^8.0.0","static-react":"^3.1.0","static-site-generator-webpack-plugin":"^3.0.0","webpack":"^1.13.2","webpack-dev-server":"^1.15.1"},"dependencies":{"classnames":"^2.2.3","understyle":"^1.3.0"},"keywords":["components","react","react-component","ui","presentational","stateless","functional"],"main":"dist/index.js","repository":{"type":"git","url":"https://github.com/jxnblk/rebass.git"},"bugs":{"url":"https://github.com/jxnblk/rebass/issues"},"homepage":"https://github.com/jxnblk/rebass","standard":{"parser":"babel-eslint","ignore":["docs/**/*"],"globals":["test","expect"]},"eslintConfig":{"parser":"babel-eslint"},"components":[{"description":"Arrow for use in dropdowns and other UI elements","methods":[],"props":{"direction":{"type":{"name":"enum","value":[{"value":"'up'","computed":false},{"value":"'down'","computed":false}]},"required":false,"description":"Direction of arrow","defaultValue":{"value":"'down'","computed":false}}},"name":"Arrow","raw":"\nimport React from 'react'\nimport withRebass from './withRebass'\nimport classnames from 'classnames'\n\n/** Arrow for use in dropdowns and other UI elements */\n\nconst Arrow = ({\n  direction,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('Arrow', className)\n\n  const sx = {\n    display: 'inline-block',\n    width: 0,\n    height: 0,\n    marginLeft: '.5em',\n    verticalAlign: 'middle',\n    borderRight: '.3125em solid transparent',\n    borderLeft: '.3125em solid transparent',\n    borderTop: direction === 'down' ? '.4375em solid' : null,\n    borderBottom: direction === 'up' ? '.4375em solid' : null,\n    pointerEvents: 'none',\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nArrow.propTypes = {\n  /** Direction of arrow */\n  direction: React.PropTypes.oneOf(['up', 'down'])\n}\n\nArrow.defaultProps = {\n  direction: 'down'\n}\n\nArrow._name = 'Arrow'\n\nexport default withRebass(Arrow)\n\n"},{"description":"","methods":[],"name":"AspectRatio","raw":"\n// Fixed aspect ratio component\n\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\nconst AspectRatio = ({\n  ratio = 4 / 3,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('AspectRatio', className)\n\n  const sx = {\n    width: '100%',\n    height: 0,\n    paddingBottom: `${ratio * 100}%`,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nAspectRatio._name = 'AspectRatio'\n\nexport default withRebass(AspectRatio)\n\n"},{"description":"A circular image for displaying user avatars","methods":[],"props":{"size":{"type":{"name":"number"},"required":false,"description":"Width and height of image in pixels","defaultValue":{"value":"48","computed":false}}},"name":"Avatar","raw":"\nimport React from 'react'\nimport withRebass from './withRebass'\nimport classnames from 'classnames'\n\n/**\n * A circular image for displaying user avatars\n */\n\nconst Avatar = ({\n  size,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}, { rebass }) => {\n  const { colors } = theme\n\n  const cx = classnames('Avatar', className)\n\n  const sx = {\n    display: 'inline-block',\n    maxWidth: 'none',\n    width: size,\n    height: size,\n    backgroundColor: colors.gray,\n    borderRadius: 99999,\n    ...style\n  }\n\n  return (\n    <img\n      {...props}\n      className={cx}\n      width={size}\n      height={size}\n      style={sx}\n    />\n  )\n}\n\nAvatar.propTypes = {\n  /** Width and height of image in pixels */\n  size: React.PropTypes.number\n}\n\nAvatar.defaultProps = {\n  size: 48\n}\n\nAvatar._name = 'Avatar'\n\nexport default withRebass(Avatar)\n\n"},{"description":"Component for displaying small status indicators","methods":[],"name":"Badge","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport baseline from './util/baseline'\n\n/** Component for displaying small status indicators */\n\nconst Badge = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const {\n    fontSizes,\n    bold,\n    baselineShift,\n    scale,\n    colors,\n    borderRadius\n  } = theme\n\n  const cx = classnames('Badge', className)\n\n  const pad = baseline(baselineShift)(scale[1])\n  const xpad = props.circle ? 0 : scale[1]\n\n  const sx = {\n    fontSize: fontSizes[6],\n    fontWeight: bold,\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    verticalAlignment: 'baseline',\n    width: props.circle ? scale[2] : null,\n    height: scale[2],\n    ...pad,\n    paddingLeft: xpad,\n    paddingRight: xpad,\n    overflow: 'hidden',\n    borderRadius,\n    color: colors.white,\n    backgroundColor: colors.default,\n    ...style.fill,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nBadge._name = 'Badge'\n\nexport default withRebass(Badge)\n\n"},{"description":"Full-height banner with styling for background images","methods":[],"props":{"align":{"type":{"name":"enum","value":[{"value":"'left'","computed":false},{"value":"'center'","computed":false},{"value":"'right'","computed":false}]},"required":false,"description":"Horizontal alignment","defaultValue":{"value":"'center'","computed":false}},"backgroundImage":{"type":{"name":"string"},"required":false,"description":"Background image source"}},"name":"Banner","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Full-height banner with styling for background images\n */\n\nconst Banner = ({\n  align,\n  backgroundImage,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}, { rebass }) => {\n  const { scale, colors, fontSizes } = theme\n\n  const alignment = {\n    left: 'flex-start',\n    center: 'center',\n    right: 'flex-end'\n  }\n\n  const alignItems = alignment[align]\n\n  const cx = classnames('Banner', className)\n\n  const sx = {\n    fontSize: fontSizes[1],\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems,\n    justifyContent: 'center',\n    textAlign: align === 'center' ? 'center' : null,\n    padding: scale[4],\n    marginBottom: scale[3],\n    color: colors.white,\n    backgroundColor: colors.primary,\n    minHeight: '100vh',\n    backgroundPosition: 'center',\n    backgroundSize: 'cover',\n    backgroundImage: backgroundImage ? `url(${backgroundImage})` : null,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nBanner.propTypes = {\n  /** Horizontal alignment */\n  align: React.PropTypes.oneOf(['left', 'center', 'right']),\n  /** Background image source */\n  backgroundImage: React.PropTypes.string\n}\n\nBanner.defaultProps = {\n  align: 'center'\n}\n\nBanner._name = 'Banner'\n\nexport default withRebass(Banner)\n\n"},{"description":"","methods":[],"name":"Bar","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\nconst Bar = ({\n  value = 0,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, bold, colors } = theme\n  const cx = classnames('Bar', className)\n\n  const {\n    backgroundColor = style.fill.backgroundColor || colors.muted,\n    ...rootStyle\n  } = style\n\n  const p = `${value * 100}%`\n  const backgroundImage = `linear-gradient(90deg, ${backgroundColor} ${p}%, transparent ${p})`\n\n  const sx = {\n    fontWeight: bold,\n    padding: scale[1],\n    backgroundSize: '100% 100%',\n    backgroundImage,\n    ...rootStyle\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nBar._name = 'Bar'\n\nexport default withRebass(Bar)\n\n"},{"description":"Generic box with visual styling","methods":[],"props":{"borderColor":{"type":{"name":"string"},"required":false,"description":"Border color - can either be a key from the theme colors object or any color value"},"border":{"type":{"name":"bool"},"required":false,"description":"Adds a border"},"borderTop":{"type":{"name":"bool"},"required":false,"description":"Adds a border to the top side"},"borderRight":{"type":{"name":"bool"},"required":false,"description":"Adds a border to the right side"},"borderBottom":{"type":{"name":"bool"},"required":false,"description":"Adds a border to the bottom side"},"borderLeft":{"type":{"name":"bool"},"required":false,"description":"Adds a border to the left side"}},"name":"Block","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Generic box with visual styling\n */\n\nconst Block = ({\n  borderColor,\n  border,\n  borderTop,\n  borderRight,\n  borderBottom,\n  borderLeft,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}, { rebass }) => {\n  const { colors } = theme\n\n  borderColor = colors[borderColor] || borderColor || colors.primary\n\n  const cx = classnames('Block', className)\n\n  const sx = {\n    borderStyle: border ? 'solid' : 'none',\n    borderTopStyle: borderTop ? 'solid' : null,\n    borderRightStyle: borderRight ? 'solid' : null,\n    borderBottomStyle: borderBottom ? 'solid' : null,\n    borderLeftStyle: borderLeft ? 'solid' : null,\n    borderWidth: 4,\n    borderColor,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nBlock.propTypes = {\n  /** Border color - can either be a key from the theme colors object or any color value */\n  borderColor: React.PropTypes.string,\n  /** Adds a border */\n  border: React.PropTypes.bool,\n  /** Adds a border to the top side */\n  borderTop: React.PropTypes.bool,\n  /** Adds a border to the right side */\n  borderRight: React.PropTypes.bool,\n  /** Adds a border to the bottom side */\n  borderBottom: React.PropTypes.bool,\n  /** Adds a border to the left side */\n  borderLeft: React.PropTypes.bool\n}\n\nBlock._name = 'Block'\n\nexport default withRebass(Block)\n\n"},{"description":"Stylized blockquote element with citation link","methods":[],"props":{"source":{"type":{"name":"string"},"required":false,"description":"Name of source"},"href":{"type":{"name":"string"},"required":false,"description":"URL link to source"}},"name":"Blockquote","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Stylized blockquote element with citation link\n */\n\nconst Blockquote = ({\n  source,\n  href,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes, scale } = theme\n\n  const cx = classnames('Blockquote', className)\n\n  const sx = {\n    root: {\n      fontSize: fontSizes[3],\n      fontStyle: 'italic',\n      margin: 0,\n      marginBottom: scale[2],\n      ...style\n    },\n    p: {\n      margin: 0,\n      marginBottom: scale[1],\n      ...subComponentStyles.p\n    },\n    cite: {\n      fontSize: fontSizes[5],\n      fontStyle: 'normal',\n      ...subComponentStyles.cite\n    },\n    source: {\n      color: 'inherit',\n      ...subComponentStyles.source\n    }\n  }\n\n  return (\n    <blockquote\n      {...props}\n      className={cx}\n      style={sx.root}>\n      <p style={sx.p}>\n        {children}\n      </p>\n      <cite style={sx.cite}>\n        {'— '}\n        <a href={href}\n          style={sx.source}\n          children={source} />\n      </cite>\n    </blockquote>\n  )\n}\n\nBlockquote.propTypes = {\n  /** Name of source */\n  source: React.PropTypes.string,\n  /** URL link to source */\n  href: React.PropTypes.string\n}\n\nBlockquote._name = 'Blockquote'\n\nexport default withRebass(Blockquote)\n\n"},{"description":"Box component for adding box shadows","methods":[],"name":"BoxShadow","raw":"\nimport React from 'react'\nimport withRebass from './withRebass'\nimport classnames from 'classnames'\n\n/**\n * Box component for adding box shadows\n */\n\nconst BoxShadow = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { boxShadow, borderRadius } = theme\n\n  const cx = classnames('BoxShadow', className)\n\n  const sx = {\n    boxShadow,\n    borderRadius,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx}\n    />\n  )\n}\n\nBoxShadow._name = 'BoxShadow'\n\nexport default withRebass(BoxShadow)\n\n"},{"description":"Breadcrumb navigation links","methods":[],"props":{"links":{"type":{"name":"array"},"required":true,"description":"Array of link props","defaultValue":{"value":"[]","computed":false}}},"name":"Breadcrumbs","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Breadcrumb navigation links\n */\n\nconst Breadcrumbs = ({\n  links,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes, scale } = theme\n\n  const cx = classnames('Breadcrumbs', className)\n\n  const sx = {\n    root: {\n      fontSize: fontSizes[5],\n      display: 'flex',\n      marginBottom: scale[2],\n      alignItems: 'center',\n      ...style\n    },\n    spacer: {\n      marginLeft: '.5em',\n      marginRight: '.5em',\n      ...subComponentStyles.spacer\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}>\n      {links.map((link, i) => {\n        const linkStyle = {\n          color: 'inherit',\n          textDecoration: i === links.length - 1 ? 'none' : null\n        }\n\n        return (\n          <div key={i}>\n            <a\n              {...link}\n              style={linkStyle} />\n            {i < links.length - 1 && (\n              <span style={sx.spacer}>/</span>\n            )}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nBreadcrumbs.propTypes = {\n  /** Array of link props */\n  links: React.PropTypes.array.isRequired\n}\n\nBreadcrumbs.defaultProps = {\n  links: []\n}\n\nBreadcrumbs._name = 'Breadcrumbs'\n\nexport default withRebass(Breadcrumbs)\n\n"},{"description":"A general purpose button element with customizable colors","methods":[],"props":{"href":{"type":{"name":"string"},"required":false,"description":"Pass an href prop to make the Button an <a> tag instead of a <button>"},"big":{"type":{"name":"bool"},"required":false,"description":"Creates a larger button by adding padding"},"size":{"type":{"name":"number"},"required":false,"description":"Sets height of button in pixels"},"circle":{"type":{"name":"bool"},"required":false,"description":"Creates a circle shaped button"},"baseRef":{"type":{"name":"func"},"required":false,"description":"Adds a ref to the button element"}},"name":"Button","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * A general purpose button element with customizable colors\n */\n\nconst Button = ({\n  href,\n  big,\n  size,\n  baseRef,\n  style,\n  className,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes, bold, scale, colors, borderRadius } = theme\n\n  const Comp = href ? 'a' : 'button'\n\n  const minHeight = size || scale[3]\n  const width = theme.circle ? minHeight : null\n  const padx = theme.circle ? 0 : scale[2]\n  const pady = big ? scale[2] : scale[1]\n\n  const cx = classnames('Button', className)\n\n  const fillStyles = style.fill\n\n  const sx = {\n    fontFamily: 'inherit',\n    fontSize: fontSizes[5],\n    fontWeight: bold,\n    lineHeight: `${scale[2]}px`,\n    minHeight,\n    width,\n    textDecoration: 'none',\n    display: 'inline-block',\n    margin: 0,\n    paddingTop: pady,\n    paddingBottom: pady,\n    paddingLeft: padx,\n    paddingRight: padx,\n    cursor: 'pointer',\n    border: 0,\n    borderRadius,\n    color: colors.white,\n    backgroundColor: colors.primary,\n    ...fillStyles,\n    ...style\n  }\n\n  return (\n    <Comp\n      {...props}\n      ref={baseRef}\n      href={href}\n      className={cx}\n      style={sx} />\n  )\n}\n\nButton.propTypes = {\n  /** Pass an href prop to make the Button an <a> tag instead of a <button> */\n  href: React.PropTypes.string,\n  /** Creates a larger button by adding padding */\n  big: React.PropTypes.bool,\n  /** Sets height of button in pixels */\n  size: React.PropTypes.number,\n  /** Creates a circle shaped button */\n  circle: React.PropTypes.bool,\n  /** Adds a ref to the button element */\n  baseRef: React.PropTypes.func\n}\n\nButton._name = 'Button'\n\nexport default withRebass(Button)\n\n"},{"description":"A general purpose outline style button element with customizable colors","methods":[],"props":{"href":{"type":{"name":"string"},"required":false,"description":"Pass an href prop to make the ButtonOutline an <a> tag instead of a <button>"},"big":{"type":{"name":"bool"},"required":false,"description":"Creates a larger button"}},"name":"ButtonOutline","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Button from './Button'\n\n/**\n * A general purpose outline style button element with customizable colors\n */\n\nconst ButtonOutline = ({\n  active,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { colors, borderRadius } = theme\n  const cx = classnames('ButtonOutline', className)\n\n  const {\n    backgroundColor = colors.primary\n  } = style.fill\n\n  const sx = {\n    backgroundColor: backgroundColor || 'transparent',\n    boxShadow: `inset 0 0 0 1px ${backgroundColor}`,\n    borderRadius,\n    ...(active ? style.fill : {\n      color: backgroundColor,\n      backgroundColor: 'transparent'\n    }),\n    ...style\n  }\n\n  return (\n    <Button\n      {...props}\n      circle={theme.circle}\n      className={cx}\n      style={sx} />\n  )\n}\n\nButtonOutline.propTypes = {\n  /** Pass an href prop to make the ButtonOutline an <a> tag instead of a <button> */\n  href: React.PropTypes.string,\n  /** Creates a larger button */\n  big: React.PropTypes.bool\n}\n\nButtonOutline._name = 'ButtonOutline'\n\nexport default withRebass(ButtonOutline)\n\n"},{"description":"Styled box with border","methods":[],"props":{"width":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"Width of card"}},"name":"Card","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Styled box with border\n */\n\nconst Card = ({\n  width,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}, { rebass }) => {\n  const { scale, borderColor, borderRadius } = theme\n\n  const cx = classnames('Card', className)\n  const sx = {\n    width,\n    padding: scale[1],\n    marginBottom: scale[2],\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor,\n    borderRadius,\n    overflow: 'hidden',\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nCard.propTypes = {\n  /** Width of card */\n  width: React.PropTypes.oneOfType([\n    React.PropTypes.number,\n    React.PropTypes.string\n  ])\n}\n\nCard._name = 'Card'\n\nexport default withRebass(Card)\n\n"},{"description":"Image for use within the Card component","methods":[],"props":{"src":{"type":{"name":"string"},"required":true,"description":"Image source"}},"name":"CardImage","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Image for use within the Card component\n */\n\nconst CardImage = ({\n  src,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale } = theme\n\n  const cx = classnames('CardImage', className)\n\n  const sx = {\n    display: 'block',\n    width: `calc(100% + ${2 * scale[1]}px)`,\n    maxWidth: 'none',\n    height: 'auto',\n    margin: -scale[1],\n    marginBottom: scale[1],\n    ...style\n  }\n\n  return (\n    <img\n      {...props}\n      src={src}\n      className={cx}\n      style={sx} />\n  )\n}\n\nCardImage.propTypes = {\n  /** Image source */\n  src: React.PropTypes.string.isRequired\n}\n\nCardImage._name = 'CardImage'\n\nexport default withRebass(CardImage)\n\n"},{"description":"Carousel that wraps children and displays one at a time","methods":[],"props":{"index":{"type":{"name":"number"},"required":false,"description":"Index for the child to show"}},"name":"Carousel","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Carousel that wraps children and displays one at a time\n */\n\nconst Carousel = ({\n  index,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const length = props.children ? (props.children.length || 0) : 0\n\n  const cx = classnames('Carousel', className)\n\n  const sx = {\n    root: {\n      overflow: 'hidden',\n      ...style\n    },\n    inner: {\n      whiteSpace: 'nowrap',\n      height: '100%',\n      transition: 'transform .2s ease-out',\n      transform: `translateX(${index % length * -100}%)`,\n      ...subComponentStyles.inner\n    },\n    child: {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n      whiteSpace: 'normal',\n      width: '100%',\n      height: '100%',\n      ...subComponentStyles.child\n    }\n  }\n\n  const children = React.Children.map(props.children, (child, i) => {\n    return (\n      <div style={sx.child}>\n        {child}\n      </div>\n    )\n  })\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}>\n      <div style={sx.inner}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nCarousel.propTypes = {\n  /** Index for the child to show */\n  index: React.PropTypes.number\n}\n\nCarousel._name = 'Carousel'\n\nexport default withRebass(Carousel)\n\n"},{"description":"Checkbox input with label","methods":[],"props":{"label":{"type":{"name":"string"},"required":true,"description":"Label for form element"},"name":{"type":{"name":"string"},"required":true,"description":"Name attribute for form element"},"stacked":{"type":{"name":"bool"},"required":false,"description":"Place label centered under the radio"},"baseRef":{"type":{"name":"func"},"required":false,"description":"Adds a ref to the input element"}},"name":"Checkbox","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Label from './Label'\n\n/**\n * Checkbox input with label\n */\n\nconst Checkbox = ({\n  label,\n  name,\n  checked,\n  children,\n  stacked,\n  baseRef,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors, borderRadius } = theme\n\n  const invalid = props['aria-invalid'] || props.invalid\n\n  const {\n    color,\n    backgroundColor,\n    ...rootStyle\n  } = style\n\n  const sx = {\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      flexDirection: stacked ? 'column' : null,\n      paddingBottom: scale[1],\n      color: invalid ? colors.error : null,\n      cursor: 'pointer',\n      ...rootStyle\n    },\n    input: {\n      position: 'absolute',\n      zIndex: -1,\n      opacity: 0,\n      ...subComponentStyles.input\n    },\n    box: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: scale[2],\n      height: scale[2],\n      marginRight: stacked ? null : scale[1],\n      marginBottom: stacked ? scale[1] : null,\n      ...(checked ? {\n        color: color || style.fill.color || colors.white,\n        backgroundColor: backgroundColor || style.fill.backgroundColor || colors.success,\n        borderColor: backgroundColor || style.fill.borderColor || colors.success\n      } : {\n        borderColor: theme.borderColor\n      }),\n      borderRadius,\n      borderStyle: 'solid',\n      borderWidth: 2,\n      transition: 'background-color .1s ease-out',\n      ...subComponentStyles.box\n    },\n    icon: {\n      display: checked ? null : 'none',\n      width: '75%',\n      height: '75%',\n      marginTop: 1,\n      fill: 'currentcolor',\n      ...subComponentStyles.icon\n    }\n  }\n\n  const cx = classnames('Checkbox', className, {\n    'isInvalid': invalid,\n    'isDisabled': props.disabled,\n    'isReadonly': props.readOnly\n  })\n\n  return (\n    <Label\n      className={cx}\n      style={sx.root}>\n      <input\n        {...props}\n        ref={baseRef}\n        name={name}\n        type='checkbox'\n        checked={checked}\n        style={sx.input} />\n      <div\n        className='Checkbox_box'\n        style={sx.box}>\n        <svg\n          viewBox='0 0 32 32'\n          style={sx.icon}>\n          <path d='M1 14 L5 10 L13 18 L27 4 L31 8 L13 26 z' />\n        </svg>\n      </div>\n      {label}\n    </Label>\n  )\n}\n\nCheckbox.propTypes = {\n  /** Label for form element */\n  label: React.PropTypes.string.isRequired,\n  /** Name attribute for form element */\n  name: React.PropTypes.string.isRequired,\n  /** Place label centered under the radio */\n  stacked: React.PropTypes.bool,\n  /** Adds a ref to the input element */\n  baseRef: React.PropTypes.func\n}\n\nCheckbox._name = 'Checkbox'\n\nexport default withRebass(Checkbox)\n\n"},{"description":"","methods":[],"name":"Circle","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\nconst Circle = ({\n  size = 32,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('Circle', className)\n\n  const sx = {\n    display: 'inline-block',\n    width: size,\n    height: size,\n    textAlign: 'center',\n    fontWeight: 'bold',\n    lineHeight: size + 'px',\n    overflow: 'hidden',\n    border: '1px solid',\n    borderRadius: 99999,\n    ...style.fill,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nCircle._name = 'Circle'\n\nexport default withRebass(Circle)\n\n"},{"description":"A button with an × for close and dismiss actions","methods":[],"props":{"baseRef":{"type":{"name":"func"},"required":false,"description":"Adds a ref to the button element"}},"name":"Close","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * A button with an × for close and dismiss actions\n */\n\nconst Close = ({\n  baseRef,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('Close', className)\n\n  const sx = {\n    fontSize: '1.5em',\n    lineHeight: 1,\n    fontWeight: 'bold',\n    margin: 0,\n    padding: 0,\n    cursor: 'pointer',\n    color: 'inherit',\n    backgroundColor: 'transparent',\n    border: 0,\n    WebkitAppearance: 'none',\n    ...style\n  }\n\n  return (\n    <button\n      {...props}\n      ref={baseRef}\n      title='Close'\n      className={cx}\n      style={sx}\n      children='×' />\n  )\n}\n\nClose.propTypes = {\n  /** Adds a ref to the button element */\n  baseRef: React.PropTypes.func\n}\n\nClose._name = 'Close'\n\nexport default withRebass(Close)\n\n"},{"description":"Code element for inline code snippets","methods":[],"name":"Code","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Code element for inline code snippets\n */\n\nconst Code = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { monospace, fontSizes } = theme\n\n  const cx = classnames('Code', className)\n\n  const sx = {\n    fontFamily: monospace,\n    fontSize: fontSizes[5],\n    ...style\n  }\n\n  return (\n    <code\n      {...props}\n      className={cx}\n      style={sx}\n    />\n  )\n}\n\nCode._name = 'Code'\n\nexport default withRebass(Code)\n\n"},{"description":"Div with max-width and margin auto for centering content","methods":[],"name":"Container","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Div with max-width and margin auto for centering content\n */\n\nconst Container = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale } = theme\n\n  const cx = classnames('Container', className)\n\n  const sx = {\n    maxWidth: 1024,\n    paddingLeft: scale[2],\n    paddingRight: scale[2],\n    margin: 'auto',\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nContainer._name = 'Container'\n\nexport default withRebass(Container)\n\n"},{"description":"Styled hr element","methods":[],"props":{"width":{"type":{"name":"number"},"required":false,"description":"Sets a fixed width for stylistic options"}},"name":"Divider","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Styled hr element\n */\n\nconst Divider = ({\n  width,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, borderColor } = theme\n\n  const cx = classnames('Divider', className)\n\n  const sx = {\n    width,\n    marginTop: scale[2],\n    marginBottom: scale[2],\n    border: 0,\n    borderBottomWidth: 1,\n    borderBottomStyle: 'solid',\n    borderBottomColor: borderColor,\n    ...style\n  }\n\n  return (\n    <hr\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nDivider.propTypes = {\n  /** Sets a fixed width for stylistic options */\n  width: React.PropTypes.number\n}\n\nDivider._name = 'Divider'\n\nexport default withRebass(Divider)\n\n"},{"description":"A single-value donut chart with percentage","methods":[],"props":{"value":{"type":{"name":"number"},"required":false,"description":"Value from 0 to 1","defaultValue":{"value":"0","computed":false}},"size":{"type":{"name":"number"},"required":false,"description":"Sets width and height","defaultValue":{"value":"128","computed":false}},"strokeWidth":{"type":{"name":"number"},"required":false,"description":"Sets width of stroke","defaultValue":{"value":"8","computed":false}}},"name":"Donut","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\nconst M = 'M'\nconst A = 'A'\nconst L = 'L'\nconst rad = (a) => Math.PI * a / 180\nconst rx = (c, r, a) => c + r * Math.cos(rad(a))\nconst ry = (c, r, a) => c + r * Math.sin(rad(a))\n\nconst createPath = (size, value, strokeWidth) => {\n  const c = Math.abs(size) / 2 // Center\n  const r1 = c // Outer radius\n  const r2 = c - Math.abs(strokeWidth) // Inner radius\n  const angle = Math.abs(value % 1) * 360 - 90\n\n  const largeArc = value > 0.5 ? 1 : 0\n\n  const arc1 = value === 1 ? [\n    A, r1, r1, 0, 0, 1, c, c + r1,\n    A, r1, r1, 0, 0, 1, c, c - r1\n  ] : [\n    A, r1, r1, 0, largeArc, 1,\n    rx(c, r1, angle), ry(c, r1, angle)\n  ]\n\n  const arc2 = value === 1 ? [\n    A, r2, r2, 0, 0, 0, c, c + r2,\n    A, r2, r2, 0, 0, 0, c, c - r2\n  ] : [\n    A, r2, r2, 0, largeArc, 0, c, c - r2\n  ]\n\n  return [\n    M, c, c - r1,\n    ...arc1,\n    L, rx(c, r2, angle), ry(c, r2, angle),\n    ...arc2\n  ].join(' ')\n}\n\nconst createBg = (size, strokeWidth) => {\n  const c = Math.abs(size) / 2 // Center\n  const r1 = c // Outer radius\n  const r2 = c - Math.abs(strokeWidth) // Inner radius\n\n  return [\n    M, c, 0,\n    A, r1, r1, 0, 0, 1, c, size,\n    A, r1, r1, 0, 0, 1, c, 0,\n    M, c, c - r2,\n    A, r2, r2, 0, 0, 0, c, c + r2,\n    A, r2, r2, 0, 0, 0, c, c - r2\n  ].join(' ')\n}\n\n/**\n * A single-value donut chart with percentage\n */\n\nconst Donut = ({\n  value,\n  size,\n  strokeWidth,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { bold, colors } = theme\n\n  const viewBox = `0 0 ${size} ${size}`\n\n  const cx = classnames('Donut', className)\n\n  const sx = {\n    root: {\n      position: 'relative',\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontSize: size / 4,\n      fontWeight: bold,\n      lineHeight: 1,\n      width: size,\n      height: size,\n      color: colors.primary,\n      ...style\n    },\n    svg: {\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      fill: 'currentcolor',\n      ...subComponentStyles.svg\n    },\n    bg: {\n      opacity: 1 / 16,\n      ...subComponentStyles.background\n    },\n    percentage: {\n      marginRight: '-.25em',\n      ...subComponentStyles.percentage\n    },\n    unit: {\n      fontSize: '.5em',\n      verticalAlign: 'super',\n      ...subComponentStyles.unit\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}>\n      <svg\n        viewBox={viewBox}\n        width={size}\n        height={size}\n        style={sx.svg}>\n        <path\n          d={createBg(size, strokeWidth)}\n          style={sx.bg} />\n        <path d={createPath(size, value, strokeWidth)} />\n      </svg>\n      {children}\n      {!children &&\n        <span style={sx.percentage}>\n          {Math.round(value * 100)}\n          <span style={sx.unit}>%</span>\n        </span>\n      }\n    </div>\n  )\n}\n\nDonut.propTypes = {\n  /** Value from 0 to 1 */\n  value: React.PropTypes.number,\n  /** Sets width and height */\n  size: React.PropTypes.number,\n  /** Sets width of stroke */\n  strokeWidth: React.PropTypes.number\n}\n\nDonut.defaultProps = {\n  value: 0,\n  size: 128,\n  strokeWidth: 8\n}\n\nDonut._name = 'Donut'\n\nexport default withRebass(Donut)\n\n"},{"description":"Dot indicator buttons for use in carousels","methods":[],"props":{"length":{"type":{"name":"number"},"required":false,"description":"Number of dot buttons to show"},"active":{"type":{"name":"number"},"required":false,"description":"Index of the currently active dot"},"onClick":{"type":{"name":"func"},"required":false,"description":"Click event callback - returns index of clicked button","defaultValue":{"value":"function () {}","computed":false}}},"name":"DotIndicator","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Dot indicator buttons for use in carousels\n */\n\nconst DotIndicator = ({\n  length,\n  active,\n  onClick,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale } = theme\n\n  const cx = classnames('DotIndicator', className)\n\n  const sx = {\n    root: {\n      display: 'inline-flex',\n      ...style\n    },\n    button: {\n      fontSize: 16,\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      margin: 0,\n      padding: 0,\n      width: scale[2],\n      height: scale[3],\n      color: 'inherit',\n      backgroundColor: 'transparent',\n      border: 0,\n      cursor: 'pointer',\n      ...subComponentStyles.button\n    },\n    dot: {\n      width: scale[1],\n      height: scale[1],\n      margin: 'auto',\n      backgroundColor: 'currentcolor',\n      borderRadius: 99999,\n      ...subComponentStyles.dot\n    }\n  }\n\n  const handleClick = (i) => {\n    return (e) => {\n      e.preventDefault()\n      onClick(i)\n    }\n  }\n\n  const dots = Array.from({ length }, (a, b) => b)\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}>\n      {dots.map((d) => (\n        <button\n          key={d}\n          style={{\n            ...sx.button,\n            opacity: d !== active ? 0.375 : 0.875\n          }}\n          onClick={handleClick(d)}>\n          <div style={sx.dot} />\n        </button>\n      ))}\n    </div>\n  )\n}\n\nDotIndicator.propTypes = {\n  /** Number of dot buttons to show */\n  length: React.PropTypes.number,\n  /** Index of the currently active dot */\n  active: React.PropTypes.number,\n  /** Click event callback - returns index of clicked button */\n  onClick: React.PropTypes.func\n}\n\nDotIndicator.defaultProps = {\n  onClick: function () {}\n}\n\nDotIndicator._name = 'DotIndicator'\n\nexport default withRebass(DotIndicator)\n\n"},{"description":"An off-canvas drawer component","methods":[],"props":{"size":{"type":{"name":"number"},"required":false,"description":"Width or height of drawer, depending on placement","defaultValue":{"value":"320","computed":false}},"open":{"type":{"name":"bool"},"required":false,"description":"Shows and hides the drawer","defaultValue":{"value":"false","computed":false}},"position":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'right'","computed":false},{"value":"'bottom'","computed":false},{"value":"'left'","computed":false}]},"required":false,"description":"Position relative to the viewport","defaultValue":{"value":"'left'","computed":false}},"onDismiss":{"type":{"name":"func"},"required":false,"description":"Click event callback for the background overlay","defaultValue":{"value":"function () {}","computed":false}}},"name":"Drawer","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * An off-canvas drawer component\n */\n\nconst Drawer = ({\n  open,\n  size,\n  position,\n  onDismiss,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, zIndex, colors } = theme\n\n  const placements = {\n    top: {\n      top: 0,\n      right: 0,\n      left: 0\n    },\n    right: {\n      top: 0,\n      right: 0,\n      bottom: 0\n    },\n    bottom: {\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n    left: {\n      top: 0,\n      bottom: 0,\n      left: 0\n    }\n  }\n\n  let width\n  let height\n  let transform\n\n  if (position === 'top' || position === 'bottom') {\n    height = size\n  } else {\n    width = size\n  }\n\n  const transforms = {\n    top: 'translateY(-100%)',\n    right: 'translateX(100%)',\n    bottom: 'translateY(100%)',\n    left: 'translateX(-100%)'\n  }\n\n  if (!open) {\n    transform = transforms[position]\n  }\n\n  const cx = classnames('Drawer', className)\n\n  const sx = {\n    content: {\n      position: 'fixed',\n      ...placements[position],\n      zIndex: zIndex[4],\n      width,\n      height,\n      padding: scale[2],\n      transform,\n      transition: 'transform .2s ease-out',\n      overflowX: 'hidden',\n      overflowY: 'scroll',\n      color: colors.white,\n      backgroundColor: colors.default,\n      ...style\n    },\n    dismiss: {\n      position: 'fixed',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      zIndex: zIndex[3],\n      display: open ? null : 'none',\n      ...subComponentStyles.dismiss\n    }\n  }\n\n  return (\n    <div className={cx}>\n      <div style={sx.dismiss}\n        onClick={onDismiss} />\n      <div\n        {...props}\n        className='Drawer Drawer_content'\n        style={sx.content} />\n    </div>\n  )\n}\n\nDrawer.propTypes = {\n  /** Width or height of drawer, depending on placement */\n  size: React.PropTypes.number,\n  /** Shows and hides the drawer */\n  open: React.PropTypes.bool,\n  /** Position relative to the viewport */\n  position: React.PropTypes.oneOf([\n    'top',\n    'right',\n    'bottom',\n    'left'\n  ]),\n  /** Click event callback for the background overlay */\n  onDismiss: React.PropTypes.func\n}\n\nDrawer.defaultProps = {\n  open: false,\n  size: 320,\n  position: 'left',\n  onDismiss: function () {}\n}\n\nDrawer._name = 'Drawer'\n\nexport default withRebass(Drawer)\n\n"},{"description":"Position relative container for positioning DropdownMenu component","methods":[],"name":"Dropdown","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Position relative container for positioning DropdownMenu component\n */\n\nconst Dropdown = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('Dropdown', className)\n\n  const sx = {\n    position: 'relative',\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nDropdown._name = 'Dropdown'\n\nexport default withRebass(Dropdown)\n\n"},{"description":"Absolutely positioned Menu component for use within Dropdown component","methods":[],"props":{"open":{"type":{"name":"bool"},"required":false,"description":"Toggles visibility of DropdownMenu","defaultValue":{"value":"false","computed":false}},"right":{"type":{"name":"bool"},"required":false,"description":"Anchors menu to the right"},"top":{"type":{"name":"bool"},"required":false,"description":"Anchors menu to the top"},"onDismiss":{"type":{"name":"func"},"required":false,"description":"Click event callback for the background overlay","defaultValue":{"value":"function () {}","computed":false}}},"name":"DropdownMenu","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Menu from './Menu'\n\n/**\n * Absolutely positioned Menu component for use within Dropdown component\n */\n\nconst DropdownMenu = ({\n  open,\n  right,\n  top,\n  children,\n  onDismiss,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { zIndex } = theme\n\n  const cx = classnames('DropdownMenu', className)\n\n  const sx = {\n    root: {\n      display: open ? null : 'none',\n      position: 'absolute',\n      left: right ? 'auto' : 0,\n      right: right ? 0 : 'auto',\n      top: top ? 'auto' : '100%',\n      bottom: top ? '100%' : 'auto',\n      zIndex: 4,\n      ...style\n    },\n    overlay: {\n      position: 'fixed',\n      display: open ? null : 'none',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      ...subComponentStyles.overlay\n    },\n    content: {\n      position: 'relative',\n      zIndex: zIndex[1],\n      ...subComponentStyles.content\n    },\n    Menu: {\n      ...subComponentStyles.Menu\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}>\n      <div\n        style={sx.overlay}\n        onClick={onDismiss} />\n      <div style={sx.content}>\n        <Menu {...props}\n          style={sx.Menu}\n          children={children} />\n      </div>\n    </div>\n  )\n}\n\nDropdownMenu.propTypes = {\n  /** Toggles visibility of DropdownMenu */\n  open: React.PropTypes.bool,\n  /** Anchors menu to the right */\n  right: React.PropTypes.bool,\n  /** Anchors menu to the top */\n  top: React.PropTypes.bool,\n  /** Click event callback for the background overlay */\n  onDismiss: React.PropTypes.func\n}\n\nDropdownMenu.defaultProps = {\n  open: false,\n  onDismiss: function () {}\n}\n\nDropdownMenu._name = 'DropdownMenu'\n\nexport default withRebass(DropdownMenu)\n\n"},{"description":"Responsive media embed wrapper","methods":[],"props":{"ratio":{"type":{"name":"number"},"required":false,"description":"Aspect ratio for the embed.\nDivide height over width to calculate.\nE.g. ratio={9/16}","defaultValue":{"value":"9 / 16","computed":false}}},"name":"Embed","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Responsive media embed wrapper\n */\n\nconst Embed = ({\n  ratio,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('Embed', className)\n\n  const sx = {\n    position: 'relative',\n    height: 0,\n    padding: 0,\n    paddingBottom: `${ratio * 100}%`,\n    overflow: 'hidden',\n    ...style\n  }\n\n  const childProps = {\n    style: {\n      position: 'absolute',\n      width: '100%',\n      height: '100%',\n      top: 0,\n      bottom: 0,\n      left: 0,\n      border: 0,\n      ...subComponentStyles.children\n    }\n  }\n\n  const styledChildren = React.Children.map(children, (child) => {\n    return React.cloneElement(child, childProps)\n  })\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      children={styledChildren}\n      style={sx} />\n  )\n}\n\nEmbed.propTypes = {\n  /**\n   * Aspect ratio for the embed.\n   * Divide height over width to calculate.\n   * E.g. ratio={9/16}\n   */\n  ratio: React.PropTypes.number\n}\n\nEmbed.defaultProps = {\n  ratio: 9 / 16\n}\n\nEmbed._name = 'Embed'\n\nexport default withRebass(Embed)\n\n"},{"description":"Layout container for fixed positioning children","methods":[],"props":{"top":{"type":{"name":"bool"},"required":false,"description":"Sets top: 0"},"right":{"type":{"name":"bool"},"required":false,"description":"Sets right: 0"},"bottom":{"type":{"name":"bool"},"required":false,"description":"Sets bottom: 0"},"left":{"type":{"name":"bool"},"required":false,"description":"Sets left: 0"},"zIndex":{"type":{"name":"number"},"required":false,"description":"Sets z-index"}},"name":"Fixed","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Layout container for fixed positioning children\n */\n\nconst Fixed = ({\n  top,\n  right,\n  bottom,\n  left,\n  zIndex,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('Fixed', className)\n\n  const sx = {\n    position: 'fixed',\n    top: top ? 0 : null,\n    right: right ? 0 : null,\n    bottom: bottom ? 0 : null,\n    left: left ? 0 : null,\n    zIndex,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nFixed.propTypes = {\n  /** Sets top: 0 */\n  top: React.PropTypes.bool,\n  /** Sets right: 0 */\n  right: React.PropTypes.bool,\n  /** Sets bottom: 0 */\n  bottom: React.PropTypes.bool,\n  /** Sets left: 0 */\n  left: React.PropTypes.bool,\n  /** Sets z-index */\n  zIndex: React.PropTypes.number\n}\n\nFixed._name = 'Fixed'\n\nexport default withRebass(Fixed)\n\n"},{"description":"Minimal footer component with top border","methods":[],"name":"Footer","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Minimal footer component with top border\n */\n\nconst Footer = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, fontSizes, borderColor } = theme\n\n  const cx = classnames('Footer', className)\n\n  const sx = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    marginTop: scale[3],\n    paddingTop: scale[3],\n    paddingBottom: scale[3],\n    fontSize: fontSizes[5],\n    borderTopWidth: 1,\n    borderTopStyle: 'solid',\n    borderTopColor: borderColor,\n    ...style\n  }\n\n  return (\n    <footer\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nFooter._name = 'Footer'\n\nexport default withRebass(Footer)\n\n"},{"description":"Wrapper component to control border radii and alignment of child button components","methods":[],"name":"Group","raw":"\nimport React from 'react'\nimport withRebass from './withRebass'\nimport classnames from 'classnames'\nimport {\n  Button,\n  ButtonOutline,\n  Input,\n  Select\n} from './index'\n\n/**\n * Wrapper component to control border radii and alignment of child button components\n */\n\nconst Group = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('Group', className)\n\n  const sx = {\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      ...style\n    },\n    child: {\n    }\n  }\n\n  const children = React.Children.map(props.children, (child, i) => {\n    const childProps = {}\n\n    if (child.type === Button ||\n        child.type === ButtonOutline ||\n        child.type === Input ||\n        child.type === Select) {\n      childProps.rounded = i === 0\n        ? 'left'\n        : i === props.children.length - 1\n        ? 'right'\n        : false\n    }\n\n    if (child.type === Input || child.type === Select) {\n      childProps.hideLabel = true\n      childProps.mb = 0\n    }\n\n    if (child.type === ButtonOutline ||\n        child.type === Input ||\n        child.type === Select) {\n      childProps.style = {\n        ...child.props.style,\n        marginLeft: -1\n      }\n    }\n\n    return React.cloneElement(child, childProps)\n  })\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}\n      children={children}\n    />\n  )\n}\n\nGroup._name = 'Group'\n\nexport default withRebass(Group)\n\n"},{"description":"Heading element with no margin and size based on fontSizes scale","methods":[],"props":{"big":{"type":{"name":"bool"},"required":false,"description":"Doubles the visual size - useful for marketing pages"},"level":{"type":{"name":"enum","value":[{"value":"1","computed":false},{"value":"2","computed":false},{"value":"3","computed":false},{"value":"4","computed":false},{"value":"5","computed":false},{"value":"6","computed":false}]},"required":false,"description":"Heading level, e.g. level={1} for <h1>","defaultValue":{"value":"2","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"0","computed":false},{"value":"1","computed":false},{"value":"2","computed":false},{"value":"3","computed":false},{"value":"4","computed":false},{"value":"5","computed":false},{"value":"6","computed":false}]},"required":false,"description":"Visual size of heading"},"alt":{"type":{"name":"bool"},"required":false,"description":"Applies alternate styling - useful for slugs and subheadings"},"center":{"type":{"name":"bool"},"required":false,"description":"Centers text alignment"}},"name":"Heading","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Heading element with no margin and size based on fontSizes scale\n */\n\nconst Heading = ({\n  level,\n  size,\n  big,\n  alt,\n  center,\n  className,\n  theme,\n  subComponentStyles,\n  style,\n  ...props\n}) => {\n  const { fontSizes, bold } = theme\n  const Comp = `h${level}`\n\n  const h = n => fontSizes[n]\n\n  let fontSize = typeof size === 'number' ? h(size) : h(level)\n\n  if (big) {\n    fontSize *= 2\n  }\n\n  const cx = classnames('Heading', className, {\n    'Heading_alt': alt\n  })\n\n  const sx = {\n    fontSize,\n    fontWeight: bold,\n    lineHeight: 1.25,\n    textAlign: center ? 'center' : null,\n    margin: 0,\n    ...(alt ? subComponentStyles.alt : {}),\n    ...style\n  }\n\n  return (\n    <Comp\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nHeading.propTypes = {\n  /** Doubles the visual size - useful for marketing pages */\n  big: React.PropTypes.bool,\n  /** Heading level, e.g. level={1} for <h1> */\n  level: React.PropTypes.oneOf([1, 2, 3, 4, 5, 6]),\n  /** Visual size of heading */\n  size: React.PropTypes.oneOf([0, 1, 2, 3, 4, 5, 6]),\n  /** Applies alternate styling - useful for slugs and subheadings */\n  alt: React.PropTypes.bool,\n  /** Centers text alignment */\n  center: React.PropTypes.bool\n}\n\nHeading.defaultProps = {\n  level: 2\n}\n\nHeading._name = 'Heading'\n\nexport default withRebass(Heading)\n\n"},{"description":"Heading element with unstyled link. Useful for in-page navigation","methods":[],"props":{"level":{"type":{"name":"enum","value":[{"value":"1","computed":false},{"value":"2","computed":false},{"value":"3","computed":false},{"value":"4","computed":false},{"value":"5","computed":false},{"value":"6","computed":false}]},"required":false,"description":"Heading level, e.g. level={1} for <h1>","defaultValue":{"value":"2","computed":false}},"size":{"type":{"name":"enum","value":[{"value":"1","computed":false},{"value":"2","computed":false},{"value":"3","computed":false},{"value":"4","computed":false},{"value":"5","computed":false},{"value":"6","computed":false}]},"required":false,"description":"Visual size of heading"},"href":{"type":{"name":"string"},"required":false,"description":"href for link","defaultValue":{"value":"'#!'","computed":false}}},"name":"HeadingLink","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Heading from './Heading'\n\n/**\n * Heading element with unstyled link. Useful for in-page navigation\n */\n\nconst HeadingLink = ({\n  level,\n  size,\n  href,\n  alt,\n  style,\n  className,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('HeadingLink', className)\n\n  const sx = {\n    root: {\n      ...style\n    },\n    link: {\n      color: 'inherit',\n      textDecoration: 'none',\n      ...subComponentStyles.link\n    }\n  }\n\n  return (\n    <Heading\n      alt={alt}\n      level={level}\n      size={size}\n      className={cx}\n      style={sx.root}>\n      <a\n        {...props}\n        href={href}\n        style={sx.link} />\n    </Heading>\n  )\n}\n\nHeadingLink.propTypes = {\n  /** Heading level, e.g. level={1} for <h1> */\n  level: React.PropTypes.oneOf([1, 2, 3, 4, 5, 6]),\n  /** Visual size of heading */\n  size: React.PropTypes.oneOf([1, 2, 3, 4, 5, 6]),\n  /** href for link */\n  href: React.PropTypes.string\n}\n\nHeadingLink.defaultProps = {\n  level: 2,\n  href: '#!'\n}\n\nHeadingLink._name = 'HeadingLink'\n\nexport default withRebass(HeadingLink)\n\n"},{"description":"Input element with label with support for aria-invalid, disabled, and readOnly HTML attributes","methods":[],"props":{"label":{"type":{"name":"string"},"required":true,"description":"Label for form element"},"name":{"type":{"name":"string"},"required":true,"description":"Name attribute for form element"},"type":{"type":{"name":"string"},"required":false,"description":"Form element type","defaultValue":{"value":"'text'","computed":false}},"message":{"type":{"name":"string"},"required":false,"description":"Adds a helper or error message below the input"},"hideLabel":{"type":{"name":"bool"},"required":false,"description":"Hides the form element label"},"horizontal":{"type":{"name":"bool"},"required":false,"description":"Displays label to the left"},"autoOff":{"type":{"name":"bool"},"required":false,"description":"Disables autocomplete, autocorrect, autocapitalize, and spellcheck props"},"baseRef":{"type":{"name":"func"},"required":false,"description":"Adds a ref to the input element"}},"name":"Input","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Label from './Label'\nimport Text from './Text'\n\n/**\n * Input element with label with support for aria-invalid, disabled, and readOnly HTML attributes\n */\n\nconst Input = ({\n  label,\n  name,\n  type,\n  message,\n  hideLabel,\n  horizontal,\n  children,\n  autoOff,\n  baseRef,\n  ref,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors, borderColor } = theme\n\n  const invalid = props.invalid || props['aria-invalid']\n\n  const cx = classnames('Input', className, {\n    'isInvalid': invalid,\n    'isDisabled': props.disabled,\n    'isReadonly': props.readOnly\n  })\n\n  const {\n    borderRadius = theme.borderRadius,\n    color,\n    backgroundColor,\n    ...rootStyle\n  } = style\n\n  const sx = {\n    root: {\n      display: horizontal ? 'flex' : null,\n      alignItems: horizontal ? 'baseline' : null,\n      marginBottom: scale[2],\n      color: invalid ? colors.error : null,\n      ...rootStyle\n    },\n    label: {\n      minWidth: horizontal ? 96 : null,\n      paddingRight: horizontal ? scale[1] : null,\n      ...subComponentStyles.label\n    },\n    input: {\n      fontFamily: 'inherit',\n      fontSize: 'inherit',\n      boxSizing: 'border-box',\n      display: 'block',\n      flex: horizontal ? '1 1 auto' : null,\n      width: '100%',\n      height: scale[3],\n      margin: 0,\n      paddingLeft: scale[1],\n      paddingRight: scale[1],\n      color: color || 'inherit',\n      backgroundColor: backgroundColor || colors.lighten,\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: invalid ? colors.error : borderColor,\n      borderRadius,\n      boxShadow: 'none',\n      WebkitAppearance: 'none',\n      appearance: 'none',\n      ...style.fill,\n      ...subComponentStyles.input\n    },\n    message: {\n      paddingLeft: horizontal ? scale[1] : null,\n      ...subComponentStyles.message\n    }\n  }\n\n  const autoProps = autoOff ? {\n    autoComplete: 'off',\n    autoCorrect: 'off',\n    autoCapitalize: 'off',\n    spellCheck: 'off'\n  } : {}\n\n  return (\n    <div\n      className={cx}\n      style={sx.root}>\n      <Label\n        htmlFor={name}\n        hide={hideLabel}\n        style={sx.label}\n        children={label} />\n      <input\n        {...props}\n        {...autoProps}\n        ref={baseRef}\n        type={type}\n        name={name}\n        style={sx.input} />\n      {message && (\n        <Text\n          small\n          style={sx.message}\n          children={message} />\n      )}\n    </div>\n  )\n}\n\nInput.propTypes = {\n  /** Label for form element */\n  label: React.PropTypes.string.isRequired,\n  /** Name attribute for form element */\n  name: React.PropTypes.string.isRequired,\n  /** Form element type */\n  type: React.PropTypes.string,\n  /** Adds a helper or error message below the input */\n  message: React.PropTypes.string,\n  /** Hides the form element label */\n  hideLabel: React.PropTypes.bool,\n  /** Displays label to the left */\n  horizontal: React.PropTypes.bool,\n  /** Disables autocomplete, autocorrect, autocapitalize, and spellcheck props */\n  autoOff: React.PropTypes.bool,\n  /** Adds a ref to the input element */\n  baseRef: React.PropTypes.func\n}\n\nInput.defaultProps = {\n  type: 'text'\n}\n\nInput._name = 'Input'\n\nexport default withRebass(Input)\n\n"},{"description":"Inline grouped form for search or other simple forms","methods":[],"props":{"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"name":{"type":{"name":"string"},"required":true,"description":"Input name"},"value":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"Input value"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Input placeholder"},"onChange":{"type":{"name":"func"},"required":false,"description":"onChange handler for input","defaultValue":{"value":"() => {}","computed":false}},"buttonLabel":{"type":{"name":"string"},"required":false,"description":"Text for button","defaultValue":{"value":"'Go'","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"onClick handler for button","defaultValue":{"value":"() => {}","computed":false}}},"name":"InlineForm","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Input from './Input'\nimport ButtonOutline from './ButtonOutline'\n\n/**\n * Inline grouped form for search or other simple forms\n */\n\nconst InlineForm = ({\n  label,\n  name,\n  value,\n  placeholder,\n  onChange,\n  buttonLabel,\n  onClick,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('InlineForm', className)\n\n  const sx = {\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      ...style\n    },\n    input: {\n      flex: '1 1 auto',\n      ...subComponentStyles.Input\n    },\n    button: {\n      marginLeft: -1,\n      ...subComponentStyles.Button,\n      ...subComponentStyles.ButtonOutline\n    }\n  }\n\n  return (\n    <form\n      {...props}\n      className={cx}\n      style={sx.root}>\n      <Input\n        name={name}\n        label={label}\n        value={value}\n        placeholder={placeholder}\n        onChange={onChange}\n        style={sx.input}\n        mb={0}\n        hideLabel\n        rounded='left' />\n      <ButtonOutline\n        type='submit'\n        children={buttonLabel}\n        onClick={onClick}\n        style={sx.button}\n        rounded='right' />\n    </form>\n  )\n}\n\nInlineForm.propTypes = {\n  /** Input label */\n  label: React.PropTypes.string.isRequired,\n  /** Input name */\n  name: React.PropTypes.string.isRequired,\n  /** Input value */\n  value: React.PropTypes.oneOfType([\n    React.PropTypes.number,\n    React.PropTypes.string\n  ]),\n  /** Input placeholder */\n  placeholder: React.PropTypes.string,\n  /** onChange handler for input */\n  onChange: React.PropTypes.func,\n  /** Text for button */\n  buttonLabel: React.PropTypes.string,\n  /** onClick handler for button */\n  onClick: React.PropTypes.func\n}\n\nInlineForm.defaultProps = {\n  buttonLabel: 'Go',\n  onClick: () => {},\n  onChange: () => {}\n}\n\nInlineForm._name = 'InlineForm'\n\nexport default withRebass(InlineForm)\n\n"},{"description":"Label element for form controls","methods":[],"props":{"hide":{"type":{"name":"bool"},"required":false,"description":"Accessibly hide label for use in high density UI.\n This can still cause accessibility issues. Use this with caution."}},"name":"Label","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Label element for form controls\n */\n\nconst Label = ({\n  hide,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes, bold } = theme\n\n  const cx = classnames('Label', className)\n\n  const hideStyle = hide ? {\n    position: 'absolute',\n    height: 1,\n    width: 1,\n    overflow: 'hidden',\n    clip: 'rect(1px, 1px, 1px, 1px)'\n  } : {}\n\n  const sx = {\n    fontSize: fontSizes[5],\n    fontWeight: bold,\n    lineHeight: 1,\n    ...hideStyle,\n    ...style\n  }\n\n  return (\n    <label\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nLabel.propTypes = {\n  /** Accessibly hide label for use in high density UI.\n   *  This can still cause accessibility issues. Use this with caution.\n   */\n  hide: React.PropTypes.bool\n}\n\nLabel._name = 'Label'\n\nexport default withRebass(Label)\n\n"},{"description":"Unstyled display block link","methods":[],"name":"LinkBlock","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Unstyled display block link\n */\n\nconst LinkBlock = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const cx = classnames('LinkBlock', className)\n\n  const sx = {\n    display: 'block',\n    textDecoration: 'none',\n    color: 'inherit',\n    ...style\n  }\n\n  return (\n    <a\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nLinkBlock._name = 'LinkBlock'\n\nexport default withRebass(LinkBlock)\n\n"},{"description":"List component that accepts any child component item types","methods":[],"props":{"ordered":{"type":{"name":"bool"},"required":false,"description":"Changes the root component to an ordered list"},"flush":{"type":{"name":"bool"},"required":false,"description":"Removes padding left to keep text flush-left"},"reset":{"type":{"name":"bool"},"required":false,"description":"Removes list styling"}},"name":"List","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/** List component that accepts any child component item types */\n\nconst List = ({\n  ordered,\n  reset,\n  flush,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  children,\n  ...props\n}) => {\n  const { scale } = theme\n  const Comp = ordered ? 'ol' : 'ul'\n  const cx = classnames('List', className)\n\n  flush = flush || reset\n\n  const sx = {\n    root: {\n      paddingLeft: flush ? 0 : scale[2],\n      margin: 0,\n      listStyle: reset ? 'none' : null\n    },\n    item: {\n      marginBottom: scale[1]\n    }\n  }\n\n  const wrappedChildren = React.Children.map(children, child => {\n    if (child.type === 'li') {\n      return child\n    }\n\n    return <li style={sx.item}>{child}</li>\n  })\n\n  return (\n    <Comp\n      {...props}\n      className={cx}\n      style={sx.root}>\n      {wrappedChildren}\n    </Comp>\n  )\n}\n\nList.propTypes = {\n  /** Changes the root component to an ordered list */\n  ordered: React.PropTypes.bool,\n  /** Removes padding left to keep text flush-left */\n  flush: React.PropTypes.bool,\n  /** Removes list styling */\n  reset: React.PropTypes.bool\n}\n\nList._name = 'List'\n\nexport default withRebass(List)\n\n"},{"description":"Media object with vertical alignment using flexbox","methods":[],"props":{"img":{"type":{"name":"string"},"required":false,"description":"Image source"},"right":{"type":{"name":"bool"},"required":false,"description":"Displays image to the right"},"align":{"type":{"name":"enum","value":[{"value":"'top'","computed":false},{"value":"'center'","computed":false},{"value":"'bottom'","computed":false}]},"required":false,"description":"Vertical alignment"}},"name":"Media","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Media object with vertical alignment using flexbox\n */\n\nconst Media = ({\n  img,\n  right,\n  align,\n  imgWidth,\n  imgHeight,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale } = theme\n\n  const alignment = {\n    top: 'flex-start',\n    center: 'center',\n    bottom: 'flex-end'\n  }\n\n  const alignItems = alignment[align]\n\n  const cx = classnames('Media', className)\n\n  const sx = {\n    root: {\n      display: 'flex',\n      marginBottom: scale[2],\n      alignItems,\n      ...style\n    },\n    image: {\n      flex: 'none',\n      maxWidth: 'none',\n      marginRight: right ? 0 : scale[2],\n      marginLeft: right ? scale[2] : 0,\n      order: right ? 9999 : null,\n      ...subComponentStyles.image\n    },\n    body: {\n      ...subComponentStyles.body\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}>\n      <img\n        src={img}\n        width={imgWidth}\n        height={imgHeight}\n        style={sx.image} />\n      <div\n        style={sx.body}\n        children={children} />\n    </div>\n  )\n}\n\nMedia.propTypes = {\n  /** Image source */\n  img: React.PropTypes.string,\n  /** Displays image to the right */\n  right: React.PropTypes.bool,\n  /** Vertical alignment */\n  align: React.PropTypes.oneOf(['top', 'center', 'bottom'])\n}\n\nMedia._name = 'Media'\n\nexport default withRebass(Media)\n\n"},{"description":"Menu component for navigation links and actions","methods":[],"name":"Menu","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Menu component for navigation links and actions\n */\n\nconst Menu = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors, borderColor, borderRadius } = theme\n\n  const cx = classnames('Menu', className)\n\n  const sx = {\n    display: 'flex',\n    flexDirection: 'column',\n    minWidth: 128,\n    marginBottom: scale[2],\n    overflow: 'hidden',\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderColor,\n    borderRadius,\n    color: colors.black,\n    backgroundColor: colors.white,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nMenu._name = 'Menu'\n\nexport default withRebass(Menu)\n\n"},{"description":"Component for displaying flash and error messages","methods":[],"name":"Message","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/** Component for displaying flash and error messages */\n\nconst Message = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { bold, scale, colors, borderRadius } = theme\n\n  const cx = classnames('Message', className)\n\n  const sx = {\n    fontWeight: bold,\n    display: 'flex',\n    alignItems: 'center',\n    padding: scale[2],\n    marginBottom: scale[2],\n    borderRadius,\n    color: colors.white,\n    backgroundColor: colors.primary,\n    ...style.fill,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nMessage._name = 'Message'\n\nexport default withRebass(Message)\n\n"},{"description":"Link for use in navigation. Inherits color","methods":[],"props":{"active":{"type":{"name":"bool"},"required":false,"description":"Sets active styles"},"small":{"type":{"name":"bool"},"required":false,"description":"Sets a smaller font size for compact UI"},"baseRef":{"type":{"name":"func"},"required":false,"description":"Adds a ref to the link element"}},"name":"NavItem","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Link for use in navigation. Inherits color\n */\n\nconst NavItem = ({\n  small,\n  active,\n  baseRef,\n  is,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes, scale, bold } = theme\n\n  const cx = classnames('NavItem', className)\n\n  const activeStyle = active ? subComponentStyles.active : {}\n\n  const sx = {\n    fontSize: small ? fontSizes[6] : fontSizes[5],\n    fontWeight: bold,\n    lineHeight: '1rem',\n    textDecoration: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    alignSelf: 'stretch',\n    paddingTop: small ? scale[1] / 2 : scale[1],\n    paddingBottom: small ? scale[1] / 2 : scale[1],\n    paddingLeft: scale[1],\n    paddingRight: scale[1],\n    color: 'inherit',\n    cursor: 'pointer',\n    ...style,\n    ...activeStyle\n  }\n\n  const Comp = is || 'a'\n\n  return (\n    <Comp\n      {...props}\n      ref={baseRef}\n      className={cx}\n      style={sx} />\n  )\n}\n\nNavItem.propTypes = {\n  /** Sets active styles */\n  active: React.PropTypes.bool,\n  /** Sets a smaller font size for compact UI */\n  small: React.PropTypes.bool,\n  /** Adds a ref to the link element */\n  baseRef: React.PropTypes.func\n}\n\nNavItem._name = 'NavItem'\n\nexport default withRebass(NavItem)\n\n"},{"description":"Fixed positioned overlay for use with modal dialogs","methods":[],"props":{"open":{"type":{"name":"bool"},"required":false,"description":"Shows and hides overlay","defaultValue":{"value":"false","computed":false}},"dark":{"type":{"name":"bool"},"required":false,"description":"Sets dark transparent overlay style","defaultValue":{"value":"true","computed":false}},"box":{"type":{"name":"bool"},"required":false,"description":"Sets padding and background white for the content container"},"fullWidth":{"type":{"name":"bool"},"required":false,"description":"Sets content container full width"},"onDismiss":{"type":{"name":"func"},"required":false,"description":"Click event callback for the Overlay background","defaultValue":{"value":"function () {}","computed":false}}},"name":"Overlay","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Fixed positioned overlay for use with modal dialogs\n */\n\nconst Overlay = ({\n  open,\n  dark,\n  fullWidth,\n  box,\n  onDismiss,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { zIndex, scale, colors, borderRadius } = theme\n\n  const cx = classnames('Overlay', className)\n\n  const innerStyle = {\n    padding: scale[3],\n    backgroundColor: colors.white,\n    borderRadius,\n    ...subComponentStyles.box\n  }\n\n  const sx = {\n    root: {\n      position: 'fixed',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      zIndex: zIndex[2],\n      display: open ? 'flex' : 'none',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      ...subComponentStyles.background\n    },\n    dismiss: {\n      position: 'fixed',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      backgroundColor: dark ? colors.black : colors.white,\n      opacity: 0.875,\n      ...subComponentStyles.dismiss\n    },\n    inner: {\n      position: 'relative',\n      zIndex: zIndex[1],\n      minWidth: 320,\n      width: fullWidth ? '100%' : null,\n      ...style,\n      ...(box ? innerStyle : {})\n    }\n  }\n\n  return (\n    <div\n      className={cx}\n      style={sx.root}>\n      <div style={sx.dismiss}\n        onClick={onDismiss} />\n      <div\n        {...props}\n        style={sx.inner}\n        children={children} />\n    </div>\n  )\n}\n\nOverlay.propTypes = {\n  /** Shows and hides overlay */\n  open: React.PropTypes.bool,\n  /** Sets dark transparent overlay style */\n  dark: React.PropTypes.bool,\n  /** Sets padding and background white for the content container */\n  box: React.PropTypes.bool,\n  /** Sets content container full width */\n  fullWidth: React.PropTypes.bool,\n  /** Click event callback for the Overlay background */\n  onDismiss: React.PropTypes.func\n}\n\nOverlay.defaultProps = {\n  open: false,\n  dark: true,\n  onDismiss: function () {}\n}\n\nOverlay._name = 'Overlay'\n\nexport default withRebass(Overlay)\n\n"},{"description":"Main page header with description","methods":[],"props":{"heading":{"type":{"name":"string"},"required":false,"description":"Page heading"},"description":{"type":{"name":"string"},"required":false,"description":"Description of page"}},"name":"PageHeader","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Heading from './Heading'\nimport Text from './Text'\n\n/**\n * Main page header with description\n */\n\nconst PageHeader = ({\n  heading,\n  description,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, borderColor } = theme\n\n  const cx = classnames('PageHeader', className)\n\n  const sx = {\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      alignItems: 'center',\n      paddingTop: scale[3],\n      paddingBottom: scale[2],\n      marginTop: scale[4],\n      marginBottom: scale[4],\n      borderBottomWidth: 2,\n      borderBottomStyle: 'solid',\n      borderColor,\n      ...style\n    },\n    inner: {\n      flex: '1 1 auto',\n      ...subComponentStyles.inner\n    },\n    heading: {\n      ...subComponentStyles.Heading\n    },\n    text: {\n      ...subComponentStyles.Text\n    }\n  }\n\n  return (\n    <header\n      {...props}\n      className={cx}\n      style={sx.root}>\n      <div style={sx.inner}>\n        <Heading\n          level={1}\n          style={sx.heading}\n          children={heading} />\n        {description && (\n          <Text\n            style={sx.text}\n            children={description} />\n        )}\n      </div>\n      {children}\n    </header>\n  )\n}\n\nPageHeader.propTypes = {\n  /** Page heading */\n  heading: React.PropTypes.string,\n  /** Description of page */\n  description: React.PropTypes.string\n}\n\nPageHeader._name = 'PageHeader'\n\nexport default withRebass(PageHeader)\n\n"},{"description":"Panel for containing small pieces of information","methods":[],"name":"Panel","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport PanelHeader from './PanelHeader'\nimport PanelFooter from './PanelFooter'\n\n/**\n * Panel for containing small pieces of information\n */\n\nconst Panel = ({\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors, borderRadius } = theme\n\n  const cx = classnames('Panel', className)\n\n  const fillStyle = {\n    color: colors.black,\n    borderColor: colors.gray,\n    ...style.fill\n  }\n\n  const { borderColor } = fillStyle\n\n  const sx = {\n    padding: scale[2],\n    marginBottom: scale[2],\n    borderWidth: 1,\n    borderStyle: 'solid',\n    borderRadius,\n    borderColor: borderColor || colors.primary,\n    backgroundColor: colors.white,\n    ...style\n  }\n\n  const styledChildren = React.Children.map(children, (child) => {\n    if (child.type === PanelHeader) {\n      return React.cloneElement(child, {\n        style: fillStyle\n      })\n    } else if (child.type === PanelFooter) {\n      return React.cloneElement(child, {\n        style: {\n          borderColor\n        }\n      })\n    } else {\n      return child\n    }\n  })\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx}\n      children={styledChildren} />\n  )\n}\n\nPanel._name = 'Panel'\n\nexport default withRebass(Panel)\n\n"},{"description":"Footer for Panel component with vertical centering using flexbox","methods":[],"name":"PanelFooter","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Footer for Panel component with vertical centering using flexbox\n */\n\nconst PanelFooter = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, borderRadius, fontSizes } = theme\n\n  const cx = classnames('PanelFooter', className)\n\n  const sx = {\n    fontSize: fontSizes[6],\n    display: 'flex',\n    alignItems: 'center',\n    marginTop: scale[2],\n    marginRight: -scale[2],\n    marginBottom: -scale[2],\n    marginLeft: -scale[2],\n    padding: scale[2],\n    borderTopWidth: 1,\n    borderTopStyle: 'solid',\n    borderRadius: `0 0 ${borderRadius}px ${borderRadius}px`,\n    ...style.fill,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nPanelFooter._name = 'PanelFooter'\n\nexport default withRebass(PanelFooter)\n\n"},{"description":"Header for Panel component with vertical centering using flexbox","methods":[],"name":"PanelHeader","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Header for Panel component with vertical centering using flexbox\n */\n\nconst PanelHeader = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { bold, scale, borderRadius } = theme\n\n  const cx = classnames('PanelHeader', className)\n\n  const sx = {\n    display: 'flex',\n    alignItems: 'center',\n    fontWeight: bold,\n    marginTop: -scale[2] - 1,\n    marginRight: -scale[2] - 1,\n    marginLeft: -scale[2] - 1,\n    marginBottom: scale[2],\n    padding: scale[2],\n    borderRadius: `${borderRadius}px ${borderRadius}px 0 0`,\n    ...style.fill,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nPanelHeader._name = 'PanelHeader'\n\nexport default withRebass(PanelHeader)\n\n"},{"description":"Pre element for displaying code examples","methods":[],"name":"Pre","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Pre element for displaying code examples\n */\n\nconst Pre = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { monospace, scale, fontSizes, borderColor } = theme\n\n  const cx = classnames('Pre', className)\n\n  const sx = {\n    fontFamily: monospace,\n    fontSize: fontSizes[5],\n    paddingLeft: scale[2],\n    marginBottom: scale[2],\n    borderLeft: `4px solid ${borderColor}`,\n    overflowX: 'scroll',\n    ...style\n  }\n\n  return (\n    <pre\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nPre._name = 'Pre'\n\nexport default withRebass(Pre)\n\n"},{"description":"Progress element","methods":[],"props":{"value":{"type":{"name":"number"},"required":false,"description":"Value for progress bar"},"color":{"type":{"name":"string"},"required":false,"description":"Bar color - can either be a key from the theme colors object or any color value"}},"name":"Progress","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Progress element\n */\n\nconst Progress = ({\n  value,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors } = theme\n\n  const css = `\n    .Progress_progress::-webkit-progress-bar {\n      background-color: ${colors.darken};\n    }\n    .Progress_progress::-webkit-progress-value {\n      background-color: currentcolor;\n    }\n    .Progress_progress::-moz-progress-bar {\n      background-color: currentcolor;\n    }\n  `.replace(/\\n/g, '').replace(/\\s\\s+/g, ' ')\n\n  const cx = classnames('Progress', className)\n\n  const sx = {\n    root: {\n      marginBottom: scale[2],\n      overflow: 'hidden',\n      color: colors.primary,\n      borderRadius: 9999,\n      ...style\n    },\n    progress: {\n      display: 'block',\n      width: '100%',\n      height: 8,\n      overflow: 'hidden',\n      border: 0,\n      WebkitAppearance: 'none',\n      appearance: 'none',\n      ...subComponentStyles.progress\n    }\n  }\n\n  return (\n    <div\n      className={cx}\n      style={sx.root}>\n      <style dangerouslySetInnerHTML={{ __html: css }} />\n      <progress\n        {...props}\n        className='Progress_progress'\n        value={value}\n        children={value}\n        style={sx.progress} />\n    </div>\n  )\n}\n\nProgress.propTypes = {\n  /** Value for progress bar */\n  value: React.PropTypes.number,\n  /** Bar color - can either be a key from the theme colors object or any color value */\n  color: React.PropTypes.string\n}\n\nProgress._name = 'Progress'\n\nexport default withRebass(Progress)\n\n"},{"description":"Styled custom radio input with label","methods":[],"props":{"label":{"type":{"name":"string"},"required":true,"description":"Label for form element"},"name":{"type":{"name":"string"},"required":true,"description":"Name attribute for form element"},"stacked":{"type":{"name":"bool"},"required":false,"description":"Place label centered under the radio"},"baseRef":{"type":{"name":"func"},"required":false,"description":"Adds a ref to the input element"}},"name":"Radio","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Label from './Label'\n\n/**\n * Styled custom radio input with label\n */\n\nconst Radio = ({\n  label,\n  name,\n  checked,\n  children,\n  stacked,\n  baseRef,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors } = theme\n\n  const invalid = props['aria-invalid'] || props.invalid\n\n  const cx = classnames('Radio', className, {\n    'isInvalid': invalid,\n    'isDisabled': props.disabled,\n    'isReadonly': props.readOnly\n  })\n\n  const {\n    backgroundColor,\n    ...rootStyle\n  } = style\n\n  const sx = {\n    root: {\n      position: 'relative',\n      display: 'flex',\n      alignItems: 'center',\n      flexDirection: stacked ? 'column' : null,\n      paddingBottom: scale[1],\n      color: invalid ? colors.error : null,\n      cursor: 'pointer',\n      ...rootStyle\n    },\n    input: {\n      position: 'absolute',\n      zIndex: -1,\n      opacity: 0,\n      ...subComponentStyles.input\n    },\n    dot: {\n      boxSizing: 'border-box',\n      width: scale[2],\n      height: scale[2],\n      marginRight: stacked ? null : scale[1],\n      marginBottom: stacked ? scale[1] : null,\n      backgroundColor: checked ? colors.white : 'currentcolor',\n      borderWidth: 5,\n      borderStyle: checked ? 'solid' : null,\n      borderColor: checked ? 'currentcolor' : null,\n      borderRadius: 99999,\n      opacity: checked ? null : 1 / 4,\n      transition: 'border .1s ease-out',\n      color: backgroundColor || style.fill.backgroundColor,\n      ...subComponentStyles.dot\n    }\n  }\n\n  return (\n    <Label\n      className={cx}\n      style={sx.root}>\n      <input\n        {...props}\n        ref={baseRef}\n        name={name}\n        checked={checked}\n        type='radio'\n        style={sx.input} />\n      <div\n        className='Radio_dot'\n        style={sx.dot} />\n      {label}\n    </Label>\n  )\n}\n\nRadio.propTypes = {\n  /** Label for form element */\n  label: React.PropTypes.string.isRequired,\n  /** Name attribute for form element */\n  name: React.PropTypes.string.isRequired,\n  /** Place label centered under the radio */\n  stacked: React.PropTypes.bool,\n  /** Adds a ref to the input element */\n  baseRef: React.PropTypes.func\n}\n\nRadio._name = 'Radio'\n\nexport default withRebass(Radio)\n\n"},{"description":"Star rating component with clickable buttons","methods":[],"props":{"value":{"type":{"name":"number"},"required":false,"description":"Number of star rating from 1 to 5","defaultValue":{"value":"0","computed":false}},"onClick":{"type":{"name":"func"},"required":false,"description":"Click handler - returns index of star clicked"}},"name":"Rating","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Star rating component with clickable buttons\n */\n\nconst Rating = ({\n  value,\n  onClick,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes, colors } = theme\n\n  const stars = Array.from({ length: 5 }, (a, b) => b)\n\n  const cx = classnames('Rating', className)\n\n  const sx = {\n    root: {\n      display: 'inline-flex',\n      fontSize: fontSizes[4],\n      color: colors.orange,\n      ...style\n    },\n    star: {\n      position: 'relative',\n      fontSize: 'inherit',\n      lineHeight: 1,\n      margin: 0,\n      marginRight: '.25em',\n      padding: '.25em 0',\n      border: 0,\n      color: 'inherit',\n      backgroundColor: 'transparent',\n      cursor: onClick ? 'pointer' : null,\n      ...subComponentStyles.star\n    }\n  }\n\n  const getEmptyStyle = (i) => {\n    const active = i < value\n    const color = active ? null : colors.gray\n    return { color }\n  }\n\n  const getActiveStyle = (i) => {\n    const active = i < value\n    const display = active ? null : 'none'\n    const clip = value > i && value < i + 1 ? 'rect(0, .5em, 1em, 0)' : null\n\n    return {\n      position: 'absolute',\n      top: '.25em',\n      left: 0,\n      display,\n      clip\n    }\n  }\n\n  const handleClick = (i) => {\n    return (e) => {\n      if (onClick) {\n        onClick(i + 1)\n      }\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}>\n      {stars.map((s) => (\n        <button\n          key={s}\n          style={sx.star}\n          onClick={handleClick(s)}>\n          <span style={getEmptyStyle(s)}>☆ </span>\n          <span style={getActiveStyle(s)}>★</span>\n        </button>\n      ))}\n    </div>\n  )\n}\n\nRating.propTypes = {\n  /** Number of star rating from 1 to 5 */\n  value: React.PropTypes.number,\n  /** Click handler - returns index of star clicked */\n  onClick: React.PropTypes.func\n}\n\nRating.defaultProps = {\n  value: 0\n}\n\nRating._name = 'Rating'\n\nexport default withRebass(Rating)\n\n"},{"description":"Section element with vertical padding","methods":[],"name":"Section","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Section element with vertical padding\n */\n\nconst Section = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale } = theme\n\n  const cx = classnames('Section', className)\n\n  const sx = {\n    paddingTop: scale[4],\n    paddingBottom: scale[4],\n    ...style\n  }\n\n  return (\n    <section\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nSection._name = 'Section'\n\nexport default withRebass(Section)\n\n"},{"description":"Header for section elements","methods":[],"props":{"heading":{"type":{"name":"string"},"required":false,"description":"Section heading"},"href":{"type":{"name":"string"},"required":false,"description":"Link to section, used in HeadingLink"},"description":{"type":{"name":"string"},"required":false,"description":"Description of section"}},"name":"SectionHeader","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport HeadingLink from './HeadingLink'\nimport Text from './Text'\n\n/**\n * Header for section elements\n */\n\nconst SectionHeader = ({\n  heading,\n  href,\n  description,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, borderColor } = theme\n\n  const cx = classnames('SectionHeader', className)\n\n  const sx = {\n    root: {\n      display: 'flex',\n      alignItems: 'center',\n      paddingBottom: scale[1],\n      marginTop: scale[3],\n      marginBottom: scale[3],\n      borderBottomWidth: 1,\n      borderBottomStyle: 'solid',\n      borderBottomColor: borderColor,\n      ...style\n    },\n    inner: {\n      flex: '1 1 auto',\n      ...subComponentStyles.inner\n    },\n    Heading: {\n      ...subComponentStyles.Heading\n    },\n    Text: {\n      ...subComponentStyles.Text\n    }\n  }\n\n  href = href || `#${heading || ''}`\n\n  return (\n    <header\n      {...props}\n      className={cx}\n      style={sx.root}>\n      <div style={sx.inner}>\n        <HeadingLink\n          href={href}\n          style={sx.Heading}\n          children={heading} />\n        {description && (\n          <Text\n            style={sx.Text}\n            children={description} />\n        )}\n      </div>\n      {children}\n    </header>\n  )\n}\n\nSectionHeader.propTypes = {\n  /** Section heading */\n  heading: React.PropTypes.string,\n  /** Link to section, used in HeadingLink */\n  href: React.PropTypes.string,\n  /** Description of section */\n  description: React.PropTypes.string\n}\n\nSectionHeader._name = 'SectionHeader'\n\nexport default withRebass(SectionHeader)\n\n"},{"description":"Select form control with label","methods":[],"props":{"label":{"type":{"name":"string"},"required":true,"description":"Label for form element"},"name":{"type":{"name":"string"},"required":true,"description":"Name attribute for form element"},"options":{"type":{"name":"array"},"required":true,"description":"Options for select","defaultValue":{"value":"[]","computed":false}},"message":{"type":{"name":"string"},"required":false,"description":"Adds a helper or error message below the select"},"hideLabel":{"type":{"name":"bool"},"required":false,"description":"Hides the form element label"},"horizontal":{"type":{"name":"bool"},"required":false,"description":"Displays label to the left"},"baseRef":{"type":{"name":"func"},"required":false,"description":"Adds a ref to the select element"}},"name":"Select","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Label from './Label'\nimport Text from './Text'\nimport Arrow from './Arrow'\n\n/**\n * Select form control with label\n */\n\nconst Select = ({\n  label,\n  name,\n  options,\n  message,\n  hideLabel,\n  horizontal,\n  baseRef,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors, borderColor, borderRadius } = theme\n\n  const invalid = props['aria-invalid'] || props.invalid\n\n  const cx = classnames('Select', className, {\n    'isInvalid': invalid,\n    'isDisabled': props.disabled,\n    'isReadonly': props.readOnly\n  })\n\n  const {\n    color,\n    backgroundColor,\n    ...rootStyle\n  } = style\n\n  const sx = {\n    root: {\n      display: horizontal ? 'flex' : null,\n      alignItems: horizontal ? 'baseline' : null,\n      marginBottom: scale[2],\n      color: invalid ? colors.error : null,\n      ...rootStyle\n    },\n    select: {\n      fontFamily: 'inherit',\n      fontSize: 'inherit',\n      boxSizing: 'border-box',\n      display: 'block',\n      width: '100%',\n      paddingLeft: scale[1],\n      paddingRight: scale[3],\n      height: scale[3],\n      color: color || 'inherit',\n      backgroundColor: backgroundColor || 'transparent',\n      backgroundImage: 'none',\n      borderWidth: 1,\n      borderStyle: 'solid',\n      borderColor: invalid ? colors.error : borderColor,\n      borderRadius,\n      MozAppearance: 'none',\n      WebkitAppearance: 'none',\n      ...style.fill,\n      ...subComponentStyles.select\n    },\n    label: {\n      paddingRight: horizontal ? scale[1] : null,\n      minWidth: horizontal ? 96 : null,\n      ...subComponentStyles.label\n    },\n    wrapper: {\n      position: 'relative',\n      flex: horizontal ? '1 1 auto' : null,\n      ...subComponentStyles.wrapper\n    },\n    arrow: {\n      position: 'absolute',\n      right: 0,\n      top: 0,\n      margin: scale[3] / 2,\n      transform: 'translate(50%, -50%)',\n      ...subComponentStyles.arrow\n    },\n    message: {\n      paddingLeft: horizontal ? scale[1] : null,\n      ...subComponentStyles.label\n    }\n  }\n\n  const selectOptions = options.map((opt, i) => {\n    return typeof opt === 'object'\n      ? <option key={i} {...opt} />\n      : <option key={i} children={opt} />\n  })\n\n  return (\n    <div\n      className={cx}\n      style={sx.root}>\n      <Label\n        htmlFor={name}\n        hide={hideLabel}\n        style={sx.label}\n        children={label} />\n      <div style={sx.wrapper}>\n        <select\n          {...props}\n          ref={baseRef}\n          name={name}\n          style={sx.select}>\n          {selectOptions}\n        </select>\n        <Arrow style={sx.arrow} />\n      </div>\n      {message && (\n        <Text\n          small\n          style={sx.message}\n          children={message} />\n      )}\n    </div>\n  )\n}\n\nSelect.propTypes = {\n  /** Label for form element */\n  label: React.PropTypes.string.isRequired,\n  /** Name attribute for form element */\n  name: React.PropTypes.string.isRequired,\n  /** Options for select */\n  options: React.PropTypes.array.isRequired,\n  /** Adds a helper or error message below the select */\n  message: React.PropTypes.string,\n  /** Hides the form element label */\n  hideLabel: React.PropTypes.bool,\n  /** Displays label to the left */\n  horizontal: React.PropTypes.bool,\n  /** Adds a ref to the select element */\n  baseRef: React.PropTypes.func\n}\n\nSelect.defaultProps = {\n  options: []\n}\n\nSelect._name = 'Select'\n\nexport default withRebass(Select)\n\n"},{"description":"Sequence map pattern for use in multi-step forms","methods":[],"props":{"steps":{"type":{"name":"array"},"required":false,"description":"Array of links for each step in the sequence","defaultValue":{"value":"[]","computed":false}},"active":{"type":{"name":"number"},"required":false,"description":"Index of current step"}},"name":"SequenceMap","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport SequenceMapStep from './SequenceMapStep'\n\n/**\n * Sequence map pattern for use in multi-step forms\n */\n\nconst SequenceMap = ({\n  steps,\n  active,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes, bold, colors } = theme\n\n  const cx = classnames('SequenceMap', className)\n\n  const sx = {\n    root: {\n      display: 'flex',\n      alignItems: 'flex-start',\n      justifyContent: 'space-between',\n      fontSize: fontSizes[5],\n      fontWeight: bold,\n      color: colors.gray,\n      ...style\n    },\n    step: {\n      ...subComponentStyles.step\n    }\n  }\n\n  const chx = React.Children.map(children, (child, i) => {\n    return React.cloneElement(child, {\n      width: `${1 / children.length * 100}%`,\n      first: i === 0,\n      style: sx.step\n    })\n  })\n\n  const schx = steps.map((step, i) => (\n    <SequenceMapStep\n      key={i}\n      first={i === 0}\n      width={`${100 / steps.length}%`}\n      active={i <= active}\n      style={sx.step}\n      {...step} />\n  ))\n\n  return (\n    <div\n      {...props}\n      children={chx || schx}\n      className={cx}\n      style={sx.root} />\n  )\n}\n\nSequenceMap.propTypes = {\n  /** Array of links for each step in the sequence */\n  steps: React.PropTypes.array,\n  /** Index of current step */\n  active: React.PropTypes.number\n}\n\nSequenceMap.defaultProps = {\n  steps: []\n}\n\nSequenceMap.Step = SequenceMapStep\n\nSequenceMap._name = 'SequenceMap'\n\nexport default withRebass(SequenceMap)\n\n"},{"description":"Subcomponent for use in SequenceMap","methods":[],"props":{"width":{"type":{"name":"string"},"required":false,"description":"Width of step"},"first":{"type":{"name":"bool"},"required":false,"description":"Removes line from first step"},"active":{"type":{"name":"bool"},"required":false,"description":"Sets primary color on active step"}},"name":"SequenceMapStep","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport LinkBlock from './LinkBlock'\n\n/**\n * Subcomponent for use in SequenceMap\n */\n\nconst SequenceMapStep = ({\n  width,\n  first,\n  active,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}, { rebass }) => {\n  const { scale, colors } = theme\n\n  const cx = classnames('SequenceMapStep', className)\n\n  const sx = {\n    link: {\n      position: 'relative',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      textAlign: 'center',\n      lineHeight: 1.25,\n      flex: `1 1 ${width}`,\n      paddingLeft: scale[1],\n      paddingRight: scale[1],\n      ...style\n    },\n    dot: {\n      position: 'relative',\n      zIndex: 1,\n      display: 'inline-block',\n      width: scale[2],\n      height: scale[2],\n      marginBottom: scale[1],\n      borderRadius: 99999,\n      backgroundColor: 'currentcolor',\n      ...subComponentStyles.dot\n    },\n    line: {\n      position: 'absolute',\n      top: scale[2] / 2,\n      transform: 'translate(-50%, -50%)',\n      left: 0,\n      right: 0,\n      height: 4,\n      backgroundColor: 'currentcolor',\n      ...subComponentStyles.line\n    },\n    label: {\n      ...subComponentStyles.label\n    },\n    active: {\n      color: colors.primary,\n      ...subComponentStyles.active\n    }\n  }\n\n  return (\n    <LinkBlock\n      className={cx}\n      style={{\n        ...sx.link,\n        ...(active ? sx.active : {})\n      }}\n      {...props}>\n      <div style={sx.dot} />\n      {!first && <div style={sx.line} />}\n      <div style={sx.label}>\n        {children}\n      </div>\n    </LinkBlock>\n  )\n}\n\nSequenceMapStep.propTypes = {\n  /** Width of step */\n  width: React.PropTypes.string,\n  /** Removes line from first step */\n  first: React.PropTypes.bool,\n  /** Sets primary color on active step */\n  active: React.PropTypes.bool\n}\n\nSequenceMapStep._name = 'SequenceMapStep'\n\nexport default withRebass(SequenceMapStep)\n\n"},{"description":"","methods":[],"name":"SignInForm","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Heading from './Heading'\nimport Input from './Input'\nimport Checkbox from './Checkbox'\nimport Button from './Button'\n\nconst SignInForm = ({\n  heading = 'Sign In',\n  username = '',\n  password = '',\n  remember = false,\n  onChange = () => {},\n  errors = {},\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  // const {} = theme\n\n  const cx = classnames('SignInForm', className)\n\n  const sx = {\n    root: {\n      ...style\n    }\n  }\n\n  // Or Create an Account...\n\n  return (\n    <form\n      {...props}\n      className={cx}\n      style={sx.root}>\n      {heading && <Heading mb={2} children={heading} />}\n      <Input\n        name='username'\n        label='Username'\n        value={username}\n        onChange={onChange}\n        message={errors.username}\n      />\n      <Input\n        type='password'\n        name='password'\n        label='Password'\n        value={password}\n        onChange={onChange}\n        message={errors.password}\n      />\n      <Checkbox\n        name='remember'\n        label='Remember me on this device'\n        mb={2}\n        checked={remember}\n        onClick={onChange}\n      />\n      <Button children='Sign In' />\n      <a href='#'>Forgot password?</a>\n    </form>\n  )\n}\n\nSignInForm._name = 'SignInForm'\n\nexport default withRebass(SignInForm)\n\n"},{"description":"Stylized range input with label","methods":[],"props":{"label":{"type":{"name":"string"},"required":true,"description":"Label for form element"},"name":{"type":{"name":"string"},"required":true,"description":"Name attribute for form element"},"fill":{"type":{"name":"bool"},"required":false,"description":"Adds a fill color to the track - requires client-side JavaScript"},"hideLabel":{"type":{"name":"bool"},"required":false,"description":"Hides the form element label"},"horizontal":{"type":{"name":"bool"},"required":false,"description":"Displays label to the left"},"baseRef":{"type":{"name":"func"},"required":false,"description":"Adds a ref to the input element"}},"name":"Slider","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Label from './Label'\n\n/**\n * Stylized range input with label\n */\n\nconst Slider = ({\n  label,\n  name,\n  fill,\n  hideLabel,\n  horizontal,\n  baseRef,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors } = theme\n\n  const max = props.max || 100\n  const min = props.min || 0\n  const percent = (props.value - min) / (max - min) * 100\n\n  const {\n    color,\n    backgroundColor,\n    ...rootStyle\n  } = style\n\n  const css = `\n    .Slider_input::-webkit-slider-thumb {\n      width: 24px;\n      height: 24px;\n      background-color: currentcolor;\n      border: 0;\n      border-radius: 999px;\n      -webkit-appearance: none;\n    }\n    .Slider_input::-moz-range-thumb {\n      width: 24px;\n      height: 24px;\n      background-color: currentcolor;\n      border: 0;\n      border-radius: 999px;\n    }\n  `.replace(/\\n/g, '').replace(/\\s\\s+/g, ' ')\n\n  const backgroundImage = fill ? `linear-gradient(90deg, currentcolor, currentcolor ${percent}%, transparent ${percent}%)` : null\n\n  const cx = classnames('Slider', className)\n  const { height } = { height: 6, ...subComponentStyles.input }\n\n  const sx = {\n    root: {\n      display: horizontal ? 'flex' : null,\n      alignItems: horizontal ? 'center' : null,\n      paddingBottom: scale[2],\n      ...rootStyle\n    },\n    label: {\n      minWidth: horizontal ? 96 : null,\n      paddingRight: horizontal ? scale[1] : null,\n      ...subComponentStyles.label\n    },\n    input: {\n      boxSizing: 'border-box',\n      display: 'block',\n      width: '100%',\n      flex: horizontal ? '1 1 auto' : null,\n      margin: 0,\n      marginTop: scale[2] - height / 2,\n      marginBottom: scale[2] - height / 2,\n      cursor: 'pointer',\n      color: color || 'inherit',\n      backgroundColor: backgroundColor || colors.gray,\n      backgroundImage,\n      backgroundClip: 'content-box',\n      height,\n      borderRadius: 999,\n      WebkitAppearance: 'none',\n      appearance: 'none',\n      ...subComponentStyles.input\n    }\n  }\n\n  return (\n    <div\n      className={cx}\n      style={sx.root}>\n      <style dangerouslySetInnerHTML={{ __html: css }} />\n      <Label\n        htmlFor={name}\n        hide={hideLabel}\n        style={sx.label}\n        children={label} />\n      <input\n        {...props}\n        ref={baseRef}\n        type='range'\n        name={name}\n        className='Slider_input'\n        style={sx.input} />\n    </div>\n  )\n}\n\nSlider.propTypes = {\n  /** Label for form element */\n  label: React.PropTypes.string.isRequired,\n  /** Name attribute for form element */\n  name: React.PropTypes.string.isRequired,\n  /** Adds a fill color to the track - requires client-side JavaScript */\n  fill: React.PropTypes.bool,\n  /** Hides the form element label */\n  hideLabel: React.PropTypes.bool,\n  /** Displays label to the left */\n  horizontal: React.PropTypes.bool,\n  /** Adds a ref to the input element */\n  baseRef: React.PropTypes.func\n}\n\nSlider._name = 'Slider'\n\nexport default withRebass(Slider)\n\n"},{"description":"Inline-block element for adding space between elements","methods":[],"props":{"x":{"type":{"name":"enum","value":[{"value":"1","computed":false},{"value":"2","computed":false},{"value":"3","computed":false},{"value":"4","computed":false}]},"required":false,"description":"Width of space based on the spacing scale","defaultValue":{"value":"1","computed":false}},"auto":{"type":{"name":"bool"},"required":false,"description":"Sets flex: 1 1 auto"}},"name":"Space","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Inline-block element for adding space between elements\n */\n\nconst Space = ({\n  x,\n  auto,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale } = theme\n\n  const cx = classnames('Space', className)\n\n  const sx = {\n    display: 'inline-block',\n    flex: auto ? '1 1 auto' : null,\n    width: scale[x],\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nSpace.propTypes = {\n  /** Width of space based on the spacing scale */\n  x: React.PropTypes.oneOf([1, 2, 3, 4]),\n  /** Sets flex: 1 1 auto */\n  auto: React.PropTypes.bool\n}\n\nSpace.defaultProps = {\n  x: 1\n}\n\nSpace._name = 'Space'\n\nexport default withRebass(Space)\n\n"},{"description":"Styled number display for statistics","methods":[],"props":{"value":{"type":{"name":"union","value":[{"name":"number"},{"name":"string"}]},"required":false,"description":"Value for stat shown in large font size"},"unit":{"type":{"name":"string"},"required":false,"description":"Optional unit for displaying next to value"},"label":{"type":{"name":"string"},"required":false,"description":"Label for stat"},"topLabel":{"type":{"name":"bool"},"required":false,"description":"Displays label above value"}},"name":"Stat","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Styled number display for statistics\n */\n\nconst Stat = ({\n  value,\n  label,\n  unit,\n  topLabel,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes, bold, scale } = theme\n\n  const cx = classnames('Stat', className)\n\n  const sx = {\n    root: {\n      display: 'inline-block',\n      ...style\n    },\n    value: {\n      fontSize: fontSizes[0],\n      letterSpace: '-.125em',\n      fontWeight: bold,\n      lineHeight: 1,\n      marginTop: topLabel ? scale[1] / 2 : null,\n      marginBottom: topLabel ? null : scale[1] / 2,\n      ...subComponentStyles.value\n    },\n    unit: {\n      fontSize: fontSizes[3],\n      ...subComponentStyles.unit\n    },\n    label: {\n      fontSize: fontSizes[6],\n      fontWeight: bold,\n      lineHeight: 1,\n      ...subComponentStyles.label\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}>\n      {topLabel && <div style={sx.label}>{label}</div>}\n      <div style={sx.value}>\n        {value}\n        {unit && <span style={sx.unit}>{unit}</span>}\n      </div>\n      {!topLabel && <div style={sx.label}>{label}</div>}\n    </div>\n  )\n}\n\nStat.propTypes = {\n  /** Value for stat shown in large font size */\n  value: React.PropTypes.oneOfType([\n    React.PropTypes.number,\n    React.PropTypes.string\n  ]),\n  /** Optional unit for displaying next to value */\n  unit: React.PropTypes.string,\n  /** Label for stat */\n  label: React.PropTypes.string,\n  /** Displays label above value */\n  topLabel: React.PropTypes.bool\n}\n\nStat._name = 'Stat'\n\nexport default withRebass(Stat)\n\n"},{"description":"Binary toggle switch component","methods":[],"props":{"checked":{"type":{"name":"bool"},"required":false,"description":"Sets the Switch to an active style"}},"name":"Switch","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Binary toggle switch component\n */\n\nconst Switch = ({\n  checked,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors, borderColor } = theme\n\n  const color = checked ? colors.success : borderColor\n  const transform = checked ? `translateX(${scale[3] * 0.5}px)` : 'translateX(0)'\n\n  const cx = classnames('Switch', className)\n\n  const sx = {\n    root: {\n      display: 'inline-flex',\n      width: scale[3] * 1.5,\n      height: scale[3],\n      color,\n      backgroundColor: checked ? 'currentcolor' : null,\n      borderRadius: 99999,\n      boxShadow: 'inset 0 0 0 2px',\n      cursor: 'pointer',\n      ...style\n    },\n    dot: {\n      width: scale[3],\n      height: scale[3],\n      transitionProperty: 'transform, color',\n      transitionDuration: '.1s',\n      transitionTimingFunction: 'ease-out',\n      transform,\n      boxShadow: 'inset 0 0 0 2px',\n      borderRadius: 99999,\n      color,\n      backgroundColor: colors.white,\n      ...subComponentStyles.dot\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      role='checkbox'\n      aria-checked={checked}\n      style={sx.root}>\n      <div style={sx.dot} />\n    </div>\n  )\n}\n\nSwitch.propTypes = {\n  /** Sets the Switch to an active style */\n  checked: React.PropTypes.bool\n}\n\nSwitch._name = 'Switch'\n\nexport default withRebass(Switch)\n\n"},{"description":"Table element with simplified props","methods":[],"props":{"headings":{"type":{"name":"array"},"required":false,"description":"Headings for <th>","defaultValue":{"value":"[]","computed":false}},"data":{"type":{"name":"arrayOf","value":{"name":"array"}},"required":false,"description":"Array of table row data for <td>","defaultValue":{"value":"[]","computed":false}}},"name":"Table","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Table element with simplified props\n */\n\nconst Table = ({\n  headings,\n  data,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes, scale, borderColor } = theme\n\n  const cx = classnames('Table', className)\n\n  const sx = {\n    root: {\n      maxWidth: '100%',\n      overflowX: 'scroll',\n      marginBottom: scale[2],\n      borderColor,\n      ...style\n    },\n    table: {\n      fontSize: fontSizes[5],\n      lineHeight: 1.25,\n      borderCollapse: 'separate',\n      borderSpacing: 0,\n      width: '100%',\n      ...subComponentStyles.table\n    },\n    thead: {\n      ...subComponentStyles.thead\n    },\n    tbody: {\n      ...subComponentStyles.tbody\n    },\n    tr: {\n      ...subComponentStyles.tr\n    },\n    th: {\n      textAlign: 'left',\n      verticalAlign: 'bottom',\n      padding: scale[1],\n      paddingLeft: 0,\n      borderBottomStyle: 'solid',\n      borderBottomWidth: 2,\n      borderColor: 'inherit',\n      ...subComponentStyles.th\n    },\n    td: {\n      padding: scale[1],\n      paddingLeft: 0,\n      borderBottomStyle: 'solid',\n      borderBottomWidth: 1,\n      borderColor: 'inherit',\n      ...subComponentStyles.td\n    }\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx.root}>\n      <table style={sx.table}>\n        <thead style={sx.thead}>\n          <tr style={sx.tr}>\n            {headings.map((heading, i) => (\n              <th key={i}\n                style={sx.th}\n                children={heading} />\n            ))}\n          </tr>\n        </thead>\n        <tbody style={sx.tbody}>\n          {data.map((row, i) => (\n            <tr key={i}\n              style={sx.tr}>\n              {row.map((datum, j) => (\n                <td key={j}\n                  style={sx.td}\n                  children={datum} />\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nTable.propTypes = {\n  /** Headings for <th> */\n  headings: React.PropTypes.array,\n  /** Array of table row data for <td> */\n  data: React.PropTypes.arrayOf(React.PropTypes.array)\n}\n\nTable.defaultProps = {\n  headings: [],\n  data: []\n}\n\nTable._name = 'Table'\n\nexport default withRebass(Table)\n\n"},{"description":"","methods":[],"name":"Tabs","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\nconst Tabs = ({\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { borderColor } = theme\n\n  const cx = classnames('Tabs', className)\n\n  const sx = {\n    display: 'flex',\n    alignItems: 'flex-end',\n    borderBottomWidth: 1,\n    borderBottomStyle: 'solid',\n    borderBottomColor: borderColor,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx}>\n      {children}\n    </div>\n  )\n}\n\nTabs._name = 'Tabs'\n\nexport default withRebass(Tabs)\n\n"},{"description":"","methods":[],"name":"TabItem","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\nconst TabItem = ({\n  is = 'a',\n  active,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, fontSizes, bold, colors } = theme\n  const Comp = is\n\n  const cx = classnames('TabItem', className)\n\n  const sx = {\n    fontWeight: bold,\n    fontSize: fontSizes[5],\n    paddingTop: scale[1],\n    paddingBottom: scale[1],\n    marginRight: scale[2],\n    textDecoration: 'none',\n    borderBottomWidth: 2,\n    borderBottomStyle: 'solid',\n    borderBottomColor: 'transparent',\n    cursor: 'pointer',\n    ...(active ? {\n      color: colors.primary,\n      borderBottomColor: colors.primary\n    } : {}),\n    ...style\n  }\n\n  return (\n    <Comp\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nTabItem._name = 'TabItem'\n\nexport default withRebass(TabItem)\n\n"},{"description":"Component for displaying text in UI","methods":[],"props":{"small":{"type":{"name":"bool"},"required":false,"description":"Sets a smaller font size"}},"name":"Text","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Component for displaying text in UI\n */\n\nconst Text = ({\n  size,\n  small,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { fontSizes } = theme\n\n  const cx = classnames('Text', className)\n\n  size = size || (small ? 6 : 4)\n  const sx = {\n    fontSize: fontSizes[size],\n    margin: 0,\n    ...style\n  }\n\n  return (\n    <p\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nText.propTypes = {\n  /** Sets a smaller font size */\n  small: React.PropTypes.bool\n}\n\nText._name = 'Text'\n\nexport default withRebass(Text)\n\n"},{"description":"Textarea form element with label","methods":[],"props":{"label":{"type":{"name":"string"},"required":true,"description":"Label for form element"},"name":{"type":{"name":"string"},"required":true,"description":"Name attribute for form element"},"message":{"type":{"name":"string"},"required":false,"description":"Adds a helper or error message below the textarea"},"hideLabel":{"type":{"name":"bool"},"required":false,"description":"Hides the form element label"},"horizontal":{"type":{"name":"bool"},"required":false,"description":"Displays label to the left"},"baseRef":{"type":{"name":"func"},"required":false,"description":"Adds a ref to the textarea element"}},"name":"Textarea","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\nimport Label from './Label'\nimport Text from './Text'\n\n/**\n * Textarea form element with label\n */\n\nconst Textarea = ({\n  label,\n  name,\n  message,\n  hideLabel,\n  horizontal,\n  baseRef,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors, borderColor, borderRadius } = theme\n\n  const invalid = props['aria-invalid'] || props.invalid\n\n  const cx = classnames('Textarea', className, {\n    'isInvalid': invalid,\n    'isDisabled': props.disabled,\n    'isReadonly': props.readOnly\n  })\n\n  const {\n    color,\n    backgroundColor,\n    ...rootStyle\n  } = style\n\n  const sx = {\n    root: {\n      display: horizontal ? 'flex' : null,\n      alignItems: horizontal ? 'baseline' : null,\n      marginBottom: scale[2],\n      color: invalid ? colors.error : null,\n      ...rootStyle\n    },\n    label: {\n      minWidth: horizontal ? 96 : null,\n      paddingRight: horizontal ? scale[1] : null,\n      ...subComponentStyles.label\n    },\n    textarea: {\n      fontFamily: 'inherit',\n      fontSize: 'inherit',\n      boxSizing: 'border-box',\n      display: 'block',\n      flex: horizontal ? '1 1 auto' : null,\n      width: '100%',\n      padding: scale[1],\n      color: color || 'inherit',\n      backgroundColor: backgroundColor || colors.lighten,\n      borderWidth: 1,\n      borderStyles: 'solid',\n      borderColor,\n      borderRadius,\n      boxShadow: 'none',\n      WebkitAppearance: 'none',\n      appearance: 'none',\n      ...subComponentStyles.textarea\n    },\n    message: {\n      paddingLeft: horizontal ? scale[1] : null,\n      ...subComponentStyles.message\n    }\n  }\n\n  return (\n    <div\n      className={cx}\n      style={sx.root}>\n      <Label\n        htmlFor={name}\n        hide={hideLabel}\n        style={sx.label}\n        children={label} />\n      <textarea\n        {...props}\n        ref={baseRef}\n        name={name}\n        style={sx.textarea} />\n      {message && (\n        <Text\n          small\n          style={sx.message}\n          children={message} />\n      )}\n    </div>\n  )\n}\n\nTextarea.propTypes = {\n  /** Label for form element */\n  label: React.PropTypes.string.isRequired,\n  /** Name attribute for form element */\n  name: React.PropTypes.string.isRequired,\n  /** Adds a helper or error message below the textarea */\n  message: React.PropTypes.string,\n  /** Hides the form element label */\n  hideLabel: React.PropTypes.bool,\n  /** Displays label to the left */\n  horizontal: React.PropTypes.bool,\n  /** Adds a ref to the textarea element */\n  baseRef: React.PropTypes.func\n}\n\nTextarea._name = 'Textarea'\n\nexport default withRebass(Textarea)\n\n"},{"description":"Toolbar component that vertically centers children with display flex","methods":[],"name":"Toolbar","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Toolbar component that vertically centers children with display flex\n */\n\nconst Toolbar = ({\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const { scale, colors } = theme\n\n  const cx = classnames('Toolbar', className)\n\n  const sx = {\n    display: 'flex',\n    alignItems: 'center',\n    minHeight: 48,\n    paddingLeft: scale[1],\n    paddingRight: scale[1],\n    color: colors.white,\n    backgroundColor: colors.black,\n    ...style.fill,\n    ...style\n  }\n\n  return (\n    <div\n      {...props}\n      className={cx}\n      style={sx} />\n  )\n}\n\nToolbar._name = 'Toolbar'\n\nexport default withRebass(Toolbar)\n\n"},{"description":"Styled tooltip that shows on hover","methods":[],"props":{"title":{"type":{"name":"string"},"required":false,"description":"Text to display in tooltip"}},"name":"Tooltip","raw":"\nimport React from 'react'\nimport classnames from 'classnames'\nimport withRebass from './withRebass'\n\n/**\n * Styled tooltip that shows on hover\n */\n\nconst Tooltip = ({\n  title,\n  children,\n  className,\n  style,\n  theme,\n  subComponentStyles,\n  ...props\n}) => {\n  const {\n    fontSizes,\n    scale,\n    colors,\n    borderRadius\n  } = theme\n\n  const cx = classnames('Tooltip', className)\n\n  const css = `\n    .Tooltip_box { display: none }\n    .Tooltip:hover .Tooltip_box { display: block }\n  `.replace(/\\n/g, '').replace(/\\s\\s+/g, ' ')\n\n  const sx = {\n    root: {\n      position: 'relative',\n      display: 'inline-block',\n      cursor: 'pointer',\n      ...style\n    },\n    box: {\n      position: 'absolute',\n      bottom: '100%',\n      left: '50%',\n      fontSize: fontSizes[6],\n      whiteSpace: 'nowrap',\n      paddingTop: scale[1] / 2,\n      paddingBottom: scale[1] / 2,\n      paddingLeft: scale[1],\n      paddingRight: scale[1],\n      borderRadius,\n      transform: 'translate(-50%, -8px)',\n      color: colors.white,\n      backgroundColor: colors.black,\n      ...style.fill,\n      ...subComponentStyles.box\n    },\n    arrow: {\n      position: 'absolute',\n      top: '100%',\n      left: '50%',\n      border: '6px solid transparent',\n      borderTopColor: style.fill.backgroundColor || style.backgroundColor || colors.black,\n      transform: 'translate(-50%, 0)',\n      ...subComponentStyles.box\n    }\n  }\n\n  return (\n    <span\n      className={cx}\n      aria-label={title}\n      style={sx.root}>\n      <style dangerouslySetInnerHTML={{ __html: css }} />\n      <div\n        {...props}\n        style={sx.box}\n        className='Tooltip_box'>\n        {title}\n        <div className='Tooltip_arrow' style={sx.arrow} />\n      </div>\n      {children}\n    </span>\n  )\n}\n\nTooltip.propTypes = {\n  /** Text to display in tooltip */\n  title: React.PropTypes.string\n}\n\nTooltip._name = 'Tooltip'\n\nexport default withRebass(Tooltip)\n\n"}]}